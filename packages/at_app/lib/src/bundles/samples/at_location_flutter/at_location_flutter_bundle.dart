// GENERATED CODE - DO NOT MODIFY BY HAND
// ignore_for_file: prefer_single_quotes, public_member_api_docs, lines_longer_than_80_chars, implicit_dynamic_list_literal, implicit_dynamic_map_literal

import 'package:mason/mason.dart';

final atLocationFlutterBundle = MasonBundle.fromJson(<String, dynamic>{
  "files": [
    {
      "path": "lib\\main.dart",
      "data":
          "aW1wb3J0ICdkYXJ0OmFzeW5jJzsNCmltcG9ydCAncGFja2FnZTpmbHV0dGVyL21hdGVyaWFsLmRhcnQnOw0KaW1wb3J0ICdwYWNrYWdlOmF0X2NsaWVudF9tb2JpbGUvYXRfY2xpZW50X21vYmlsZS5kYXJ0JzsNCmltcG9ydCAncGFja2FnZTphdF9vbmJvYXJkaW5nX2ZsdXR0ZXIvYXRfb25ib2FyZGluZ19mbHV0dGVyLmRhcnQnDQogICAgc2hvdyBPbmJvYXJkaW5nOw0KaW1wb3J0ICdwYWNrYWdlOmF0X3V0aWxzL2F0X2xvZ2dlci5kYXJ0JyBzaG93IEF0U2lnbkxvZ2dlcjsNCmltcG9ydCAncGFja2FnZTpwYXRoX3Byb3ZpZGVyL3BhdGhfcHJvdmlkZXIuZGFydCcNCiAgICBzaG93IGdldEFwcGxpY2F0aW9uU3VwcG9ydERpcmVjdG9yeTsNCmltcG9ydCAncGFja2FnZTphdF9hcHBfZmx1dHRlci9hdF9hcHBfZmx1dHRlci5kYXJ0JyBzaG93IEF0RW52Ow0KaW1wb3J0ICdzZWNvbmRfc2NyZWVuLmRhcnQnOw0KDQpGdXR1cmU8dm9pZD4gbWFpbigpIGFzeW5jIHsNCiAgYXdhaXQgQXRFbnYubG9hZCgpOw0KICBydW5BcHAoY29uc3QgTXlBcHAoKSk7DQp9DQoNCkZ1dHVyZTxBdENsaWVudFByZWZlcmVuY2U+IGxvYWRBdENsaWVudFByZWZlcmVuY2UoKSBhc3luYyB7DQogIHZhciBkaXIgPSBhd2FpdCBnZXRBcHBsaWNhdGlvblN1cHBvcnREaXJlY3RvcnkoKTsNCiAgcmV0dXJuIEF0Q2xpZW50UHJlZmVyZW5jZSgpDQogICAgICAgIC4ucm9vdERvbWFpbiA9IEF0RW52LnJvb3REb21haW4NCiAgICAgICAgLi5uYW1lc3BhY2UgPSBBdEVudi5hcHBOYW1lc3BhY2UNCiAgICAgICAgLi5oaXZlU3RvcmFnZVBhdGggPSBkaXIucGF0aA0KICAgICAgICAuLmNvbW1pdExvZ1BhdGggPSBkaXIucGF0aA0KICAgICAgICAuLmlzTG9jYWxTdG9yZVJlcXVpcmVkID0gdHJ1ZQ0KICAgICAgLy8gaWdub3JlOiB0b2RvDQogICAgICAvLyBUT0RPIHNldCB0aGUgcmVzdCBvZiB5b3VyIEF0Q2xpZW50UHJlZmVyZW5jZSBoZXJlDQogICAgICA7DQp9DQoNCmNsYXNzIE15QXBwIGV4dGVuZHMgU3RhdGVmdWxXaWRnZXQgew0KICBjb25zdCBNeUFwcCh7S2V5PyBrZXl9KSA6IHN1cGVyKGtleToga2V5KTsNCiAgQG92ZXJyaWRlDQogIF9NeUFwcFN0YXRlIGNyZWF0ZVN0YXRlKCkgPT4gX015QXBwU3RhdGUoKTsNCn0NCg0KY2xhc3MgX015QXBwU3RhdGUgZXh0ZW5kcyBTdGF0ZTxNeUFwcD4gew0KICAvLyAqIGxvYWQgdGhlIEF0Q2xpZW50UHJlZmVyZW5jZSBpbiB0aGUgYmFja2dyb3VuZA0KICBGdXR1cmU8QXRDbGllbnRQcmVmZXJlbmNlPiBmdXR1cmVQcmVmZXJlbmNlID0gbG9hZEF0Q2xpZW50UHJlZmVyZW5jZSgpOw0KICBBdENsaWVudFByZWZlcmVuY2U/IGF0Q2xpZW50UHJlZmVyZW5jZTsNCiAgQXRDbGllbnRTZXJ2aWNlPyBhdENsaWVudFNlcnZpY2U7DQoNCiAgZmluYWwgQXRTaWduTG9nZ2VyIF9sb2dnZXIgPSBBdFNpZ25Mb2dnZXIoQXRFbnYuYXBwTmFtZXNwYWNlKTsNCg0KICBAb3ZlcnJpZGUNCiAgV2lkZ2V0IGJ1aWxkKEJ1aWxkQ29udGV4dCBjb250ZXh0KSB7DQogICAgcmV0dXJuIE1hdGVyaWFsQXBwKA0KICAgICAgLy8gKiBUaGUgb25ib2FyZGluZyBzY3JlZW4gKGZpcnN0IHNjcmVlbikNCiAgICAgIG5hdmlnYXRvcktleTogTmF2U2VydmljZS5uYXZLZXksDQogICAgICBob21lOiBTY2FmZm9sZCgNCiAgICAgICAgICBhcHBCYXI6IEFwcEJhcigNCiAgICAgICAgICAgIHRpdGxlOiBjb25zdCBUZXh0KCdhdF9sb2NhdGlvbl9mbHV0dGVyIGV4YW1wbGUgYXBwJyksDQogICAgICAgICAgKSwNCiAgICAgICAgICBib2R5OiBCdWlsZGVyKA0KICAgICAgICAgICAgYnVpbGRlcjogKGNvbnRleHQpID0+IENvbHVtbigNCiAgICAgICAgICAgICAgY2hpbGRyZW46IFsNCiAgICAgICAgICAgICAgICBjb25zdCBTaXplZEJveCgNCiAgICAgICAgICAgICAgICAgIGhlaWdodDogMjUsDQogICAgICAgICAgICAgICAgKSwNCiAgICAgICAgICAgICAgICBDZW50ZXIoDQogICAgICAgICAgICAgICAgICBjaGlsZDogRWxldmF0ZWRCdXR0b24oDQogICAgICAgICAgICAgICAgICAgIG9uUHJlc3NlZDogKCkgYXN5bmMgew0KICAgICAgICAgICAgICAgICAgICAgIHZhciBwcmVmZXJlbmNlID0gYXdhaXQgZnV0dXJlUHJlZmVyZW5jZTsNCiAgICAgICAgICAgICAgICAgICAgICBzZXRTdGF0ZSgoKSB7DQogICAgICAgICAgICAgICAgICAgICAgICBhdENsaWVudFByZWZlcmVuY2UgPSBwcmVmZXJlbmNlOw0KICAgICAgICAgICAgICAgICAgICAgIH0pOw0KICAgICAgICAgICAgICAgICAgICAgIE9uYm9hcmRpbmcoDQogICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0OiBjb250ZXh0LA0KICAgICAgICAgICAgICAgICAgICAgICAgYXRDbGllbnRQcmVmZXJlbmNlOiBhdENsaWVudFByZWZlcmVuY2UhLA0KICAgICAgICAgICAgICAgICAgICAgICAgZG9tYWluOiBBdEVudi5yb290RG9tYWluLA0KICAgICAgICAgICAgICAgICAgICAgICAgcm9vdEVudmlyb25tZW50OiBBdEVudi5yb290RW52aXJvbm1lbnQsDQogICAgICAgICAgICAgICAgICAgICAgICBhcHBBUElLZXk6ICc0NzdiLTg3NnUtYmNlei1jNDJ6LTZhM2QnLA0KICAgICAgICAgICAgICAgICAgICAgICAgb25ib2FyZDogKE1hcDxTdHJpbmc/LCBBdENsaWVudFNlcnZpY2U+IHZhbHVlLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIFN0cmluZz8gYXRzaWduKSBhc3luYyB7DQogICAgICAgICAgICAgICAgICAgICAgICAgIGF0Q2xpZW50U2VydmljZSA9IHZhbHVlW2F0c2lnbl07DQogICAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IE5hdmlnYXRvci5wdXNoUmVwbGFjZW1lbnQoDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0LA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTWF0ZXJpYWxQYWdlUm91dGUoDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVpbGRlcjogKGNvbnRleHQpID0+IGNvbnN0IFNlY29uZFNjcmVlbigpKSk7DQogICAgICAgICAgICAgICAgICAgICAgICB9LA0KICAgICAgICAgICAgICAgICAgICAgICAgb25FcnJvcjogKGVycm9yKSBhc3luYyB7DQogICAgICAgICAgICAgICAgICAgICAgICAgIF9sb2dnZXIuc2V2ZXJlKCdPbmJvYXJkaW5nIHRocm93cyAkZXJyb3IgZXJyb3InKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgc2hvd0RpYWxvZygNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQ6IGNvbnRleHQsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBidWlsZGVyOiAoQnVpbGRDb250ZXh0IGNvbnRleHQpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEFsZXJ0RGlhbG9nKA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IGNvbnN0IFRleHQoJ1NvbWV0aGluZyB3ZW50IHdyb25nJyksDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uczogWw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVGV4dEJ1dHRvbigNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvblByZXNzZWQ6ICgpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE5hdmlnYXRvci5vZihjb250ZXh0KS5wb3AoKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkOiBjb25zdCBUZXh0KCdvaycpKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0sDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0sDQogICAgICAgICAgICAgICAgICAgICAgKTsNCiAgICAgICAgICAgICAgICAgICAgfSwNCiAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IGNvbnN0IFRleHQoJ1N0YXJ0IG9uYm9hcmRpbmcnKSwNCiAgICAgICAgICAgICAgICAgICksDQogICAgICAgICAgICAgICAgKSwNCiAgICAgICAgICAgICAgICBjb25zdCBTaXplZEJveCgNCiAgICAgICAgICAgICAgICAgIGhlaWdodDogMjUsDQogICAgICAgICAgICAgICAgKSwNCiAgICAgICAgICAgICAgICBDZW50ZXIoDQogICAgICAgICAgICAgICAgICAgIGNoaWxkOiBUZXh0QnV0dG9uKA0KICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU6IEJ1dHRvblN0eWxlKA0KICAgICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBNYXRlcmlhbFN0YXRlUHJvcGVydHkuYWxsPENvbG9yPihDb2xvcnMuYmxhY2sxMiksDQogICAgICAgICAgICAgICAgICAgICAgICApLA0KICAgICAgICAgICAgICAgICAgICAgICAgb25QcmVzc2VkOiAoKSBhc3luYyB7DQogICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfYXRzaWduc0xpc3QgPSBhd2FpdCBLZXljaGFpblV0aWwuZ2V0QXRzaWduTGlzdCgpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKFN0cmluZyBhdHNpZ24gaW4gKF9hdHNpZ25zTGlzdCA/PyBbXSkpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCBLZXljaGFpblV0aWwucmVzZXRBdFNpZ25Gcm9tS2V5Y2hhaW4oYXRzaWduKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgICAgICAgICAgIFNjYWZmb2xkTWVzc2VuZ2VyLm9mKGNvbnRleHQpLnNob3dTbmFja0JhcigNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IFNuYWNrQmFyKA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IFRleHQoJ0NsZWFyZWQgYWxsIHBhaXJlZCBhdHNpZ25zJykpKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0sDQogICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogY29uc3QgVGV4dCgnQ2xlYXIgcGFpcmVkIGF0c2lnbnMnLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlOiBUZXh0U3R5bGUoY29sb3I6IENvbG9ycy5ibGFjaykpKSksDQogICAgICAgICAgICAgIF0sDQogICAgICAgICAgICApLA0KICAgICAgICAgICkpLA0KICAgICk7DQogIH0NCn0NCg0KY2xhc3MgTmF2U2VydmljZSB7DQogIHN0YXRpYyBHbG9iYWxLZXk8TmF2aWdhdG9yU3RhdGU+IG5hdktleSA9IEdsb2JhbEtleSgpOw0KfQ0K",
      "type": "text"
    },
    {
      "path": "lib\\second_screen.dart",
      "data":
          "",
      "type": "text"
    }
  ],
  "hooks": [],
  "name": "at_location_flutter",
  "description": "A sample of how to use the at_location_flutter package",
  "version": "0.1.0",
  "environment": {"mason": "any"},
  "vars": {}
});
