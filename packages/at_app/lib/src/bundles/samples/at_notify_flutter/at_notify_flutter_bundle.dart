// GENERATED CODE - DO NOT MODIFY BY HAND
// ignore_for_file: prefer_single_quotes, public_member_api_docs, lines_longer_than_80_chars, implicit_dynamic_list_literal, implicit_dynamic_map_literal

import 'package:mason/mason.dart';

final atNotifyFlutterBundle = MasonBundle.fromJson(<String, dynamic>{
  "files": [
    {
      "path": "lib\\main.dart",
      "data":
          "aW1wb3J0ICdkYXJ0OmFzeW5jJzsNCg0KaW1wb3J0ICdwYWNrYWdlOmZsdXR0ZXIvbWF0ZXJpYWwuZGFydCc7DQppbXBvcnQgJ3BhY2thZ2U6YXRfY2xpZW50X21vYmlsZS9hdF9jbGllbnRfbW9iaWxlLmRhcnQnOw0KaW1wb3J0ICdwYWNrYWdlOmF0X29uYm9hcmRpbmdfZmx1dHRlci9hdF9vbmJvYXJkaW5nX2ZsdXR0ZXIuZGFydCcNCiAgICBzaG93IE9uYm9hcmRpbmc7DQppbXBvcnQgJ3BhY2thZ2U6YXRfdXRpbHMvYXRfbG9nZ2VyLmRhcnQnIHNob3cgQXRTaWduTG9nZ2VyOw0KaW1wb3J0ICdwYWNrYWdlOnBhdGhfcHJvdmlkZXIvcGF0aF9wcm92aWRlci5kYXJ0Jw0KICAgIHNob3cgZ2V0QXBwbGljYXRpb25TdXBwb3J0RGlyZWN0b3J5Ow0KaW1wb3J0ICdwYWNrYWdlOmF0X2FwcF9mbHV0dGVyL2F0X2FwcF9mbHV0dGVyLmRhcnQnIHNob3cgQXRFbnY7DQoNCmltcG9ydCAnc2Vjb25kX3NjcmVlbi5kYXJ0JzsNCg0KRnV0dXJlPHZvaWQ+IG1haW4oKSBhc3luYyB7DQogIGF3YWl0IEF0RW52LmxvYWQoKTsNCiAgcnVuQXBwKGNvbnN0IE15QXBwKCkpOw0KfQ0KDQpGdXR1cmU8QXRDbGllbnRQcmVmZXJlbmNlPiBsb2FkQXRDbGllbnRQcmVmZXJlbmNlKCkgYXN5bmMgew0KICB2YXIgZGlyID0gYXdhaXQgZ2V0QXBwbGljYXRpb25TdXBwb3J0RGlyZWN0b3J5KCk7DQogIHJldHVybiBBdENsaWVudFByZWZlcmVuY2UoKQ0KICAgIC4ucm9vdERvbWFpbiA9IEF0RW52LnJvb3REb21haW4NCiAgICAuLm5hbWVzcGFjZSA9IEF0RW52LmFwcE5hbWVzcGFjZQ0KICAgIC4uaGl2ZVN0b3JhZ2VQYXRoID0gZGlyLnBhdGgNCiAgICAuLmNvbW1pdExvZ1BhdGggPSBkaXIucGF0aA0KICAgIC4uaXNMb2NhbFN0b3JlUmVxdWlyZWQgPSB0cnVlOw0KfQ0KDQpjbGFzcyBNeUFwcCBleHRlbmRzIFN0YXRlZnVsV2lkZ2V0IHsNCiAgY29uc3QgTXlBcHAoe0tleT8ga2V5fSkgOiBzdXBlcihrZXk6IGtleSk7DQogIEBvdmVycmlkZQ0KICBfTXlBcHBTdGF0ZSBjcmVhdGVTdGF0ZSgpID0+IF9NeUFwcFN0YXRlKCk7DQp9DQoNCmNsYXNzIF9NeUFwcFN0YXRlIGV4dGVuZHMgU3RhdGU8TXlBcHA+IHsNCiAgLy8gKiBsb2FkIHRoZSBBdENsaWVudFByZWZlcmVuY2UgaW4gdGhlIGJhY2tncm91bmQNCiAgRnV0dXJlPEF0Q2xpZW50UHJlZmVyZW5jZT4gZnV0dXJlUHJlZmVyZW5jZSA9IGxvYWRBdENsaWVudFByZWZlcmVuY2UoKTsNCiAgQXRDbGllbnRQcmVmZXJlbmNlPyBhdENsaWVudFByZWZlcmVuY2U7DQogIEF0Q2xpZW50U2VydmljZT8gYXRDbGllbnRTZXJ2aWNlOw0KDQogIGZpbmFsIEF0U2lnbkxvZ2dlciBfbG9nZ2VyID0gQXRTaWduTG9nZ2VyKEF0RW52LmFwcE5hbWVzcGFjZSk7DQoNCiAgQG92ZXJyaWRlDQogIFdpZGdldCBidWlsZChCdWlsZENvbnRleHQgY29udGV4dCkgew0KICAgIHJldHVybiBNYXRlcmlhbEFwcCgNCiAgICAgIC8vICogVGhlIG9uYm9hcmRpbmcgc2NyZWVuIChmaXJzdCBzY3JlZW4pDQogICAgICBob21lOiBTY2FmZm9sZCgNCiAgICAgICAgICBhcHBCYXI6IEFwcEJhcigNCiAgICAgICAgICAgIHRpdGxlOiBjb25zdCBUZXh0KCdhdF9ub3RpZnlfZmx1dHRlciBleGFtcGxlIGFwcCcpLA0KICAgICAgICAgICksDQogICAgICAgICAgYm9keTogQnVpbGRlcigNCiAgICAgICAgICAgIGJ1aWxkZXI6IChjb250ZXh0KSA9PiBDb2x1bW4oDQogICAgICAgICAgICAgIGNoaWxkcmVuOiBbDQogICAgICAgICAgICAgICAgY29uc3QgU2l6ZWRCb3goDQogICAgICAgICAgICAgICAgICBoZWlnaHQ6IDI1LA0KICAgICAgICAgICAgICAgICksDQogICAgICAgICAgICAgICAgQ2VudGVyKA0KICAgICAgICAgICAgICAgICAgY2hpbGQ6IEVsZXZhdGVkQnV0dG9uKA0KICAgICAgICAgICAgICAgICAgICBvblByZXNzZWQ6ICgpIGFzeW5jIHsNCiAgICAgICAgICAgICAgICAgICAgICB2YXIgcHJlZmVyZW5jZSA9IGF3YWl0IGZ1dHVyZVByZWZlcmVuY2U7DQogICAgICAgICAgICAgICAgICAgICAgc2V0U3RhdGUoKCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgYXRDbGllbnRQcmVmZXJlbmNlID0gcHJlZmVyZW5jZTsNCiAgICAgICAgICAgICAgICAgICAgICB9KTsNCiAgICAgICAgICAgICAgICAgICAgICBPbmJvYXJkaW5nKA0KICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dDogY29udGV4dCwNCiAgICAgICAgICAgICAgICAgICAgICAgIGF0Q2xpZW50UHJlZmVyZW5jZTogYXRDbGllbnRQcmVmZXJlbmNlISwNCiAgICAgICAgICAgICAgICAgICAgICAgIGRvbWFpbjogQXRFbnYucm9vdERvbWFpbiwNCiAgICAgICAgICAgICAgICAgICAgICAgIHJvb3RFbnZpcm9ubWVudDogQXRFbnYucm9vdEVudmlyb25tZW50LA0KICAgICAgICAgICAgICAgICAgICAgICAgYXBwQVBJS2V5OiAnNDc3Yi04NzZ1LWJjZXotYzQyei02YTNkJywNCiAgICAgICAgICAgICAgICAgICAgICAgIG9uYm9hcmQ6IChNYXA8U3RyaW5nPywgQXRDbGllbnRTZXJ2aWNlPiB2YWx1ZSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBTdHJpbmc/IGF0c2lnbikgYXN5bmMgew0KICAgICAgICAgICAgICAgICAgICAgICAgICBhdENsaWVudFNlcnZpY2UgPSB2YWx1ZVthdHNpZ25dOw0KICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCBOYXZpZ2F0b3IucHVzaFJlcGxhY2VtZW50KA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dCwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1hdGVyaWFsUGFnZVJvdXRlKA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1aWxkZXI6IChjb250ZXh0KSA9PiBjb25zdCBTZWNvbmRTY3JlZW4oKSkpOw0KICAgICAgICAgICAgICAgICAgICAgICAgfSwNCiAgICAgICAgICAgICAgICAgICAgICAgIG9uRXJyb3I6IChlcnJvcikgYXN5bmMgew0KICAgICAgICAgICAgICAgICAgICAgICAgICBfbG9nZ2VyLnNldmVyZSgnT25ib2FyZGluZyB0aHJvd3MgJGVycm9yIGVycm9yJyk7DQogICAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHNob3dEaWFsb2coDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0OiBjb250ZXh0LA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVpbGRlcjogKEJ1aWxkQ29udGV4dCBjb250ZXh0KSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBBbGVydERpYWxvZygNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBjb25zdCBUZXh0KCdTb21ldGhpbmcgd2VudCB3cm9uZycpLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbnM6IFsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRleHRCdXR0b24oDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25QcmVzc2VkOiAoKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBOYXZpZ2F0b3Iub2YoY29udGV4dCkucG9wKCk7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogY29uc3QgVGV4dCgnb2snKSkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7DQogICAgICAgICAgICAgICAgICAgICAgICB9LA0KICAgICAgICAgICAgICAgICAgICAgICk7DQogICAgICAgICAgICAgICAgICAgIH0sDQogICAgICAgICAgICAgICAgICAgIGNoaWxkOiBjb25zdCBUZXh0KCdTdGFydCBvbmJvYXJkaW5nJyksDQogICAgICAgICAgICAgICAgICApLA0KICAgICAgICAgICAgICAgICksDQogICAgICAgICAgICAgICAgY29uc3QgU2l6ZWRCb3goDQogICAgICAgICAgICAgICAgICBoZWlnaHQ6IDI1LA0KICAgICAgICAgICAgICAgICksDQogICAgICAgICAgICAgICAgQ2VudGVyKA0KICAgICAgICAgICAgICAgICAgICBjaGlsZDogVGV4dEJ1dHRvbigNCiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlOiBCdXR0b25TdHlsZSgNCiAgICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTWF0ZXJpYWxTdGF0ZVByb3BlcnR5LmFsbDxDb2xvcj4oQ29sb3JzLmJsYWNrMTIpLA0KICAgICAgICAgICAgICAgICAgICAgICAgKSwNCiAgICAgICAgICAgICAgICAgICAgICAgIG9uUHJlc3NlZDogKCkgYXN5bmMgew0KICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgX2F0c2lnbnNMaXN0ID0gYXdhaXQgS2V5Y2hhaW5VdGlsLmdldEF0c2lnbkxpc3QoKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChTdHJpbmcgYXRzaWduIGluIChfYXRzaWduc0xpc3QgPz8gW10pKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgS2V5Y2hhaW5VdGlsLnJlc2V0QXRTaWduRnJvbUtleWNoYWluKGF0c2lnbik7DQogICAgICAgICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICBTY2FmZm9sZE1lc3Nlbmdlci5vZihjb250ZXh0KS5zaG93U25hY2tCYXIoDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBTbmFja0JhcigNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBUZXh0KCdDbGVhcmVkIGFsbCBwYWlyZWQgYXRzaWducycpKSk7DQogICAgICAgICAgICAgICAgICAgICAgICB9LA0KICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IGNvbnN0IFRleHQoJ0NsZWFyIHBhaXJlZCBhdHNpZ25zJywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZTogVGV4dFN0eWxlKGNvbG9yOiBDb2xvcnMuYmxhY2spKSkpLA0KICAgICAgICAgICAgICBdLA0KICAgICAgICAgICAgKSwNCiAgICAgICAgICApKSwNCiAgICApOw0KICB9DQp9DQo=",
      "type": "text"
    },
    {
      "path": "lib\\second_screen.dart",
      "data":
          "aW1wb3J0ICdwYWNrYWdlOmF0X2FwcF9mbHV0dGVyL2F0X2FwcF9mbHV0dGVyLmRhcnQnOw0KaW1wb3J0ICdwYWNrYWdlOmZsdXR0ZXIvbWF0ZXJpYWwuZGFydCc7DQppbXBvcnQgJ3BhY2thZ2U6YXRfY2xpZW50X21vYmlsZS9hdF9jbGllbnRfbW9iaWxlLmRhcnQnOw0KaW1wb3J0ICdwYWNrYWdlOmF0X25vdGlmeV9mbHV0dGVyL3NjcmVlbnMvbm90aWZ5X3NjcmVlbi5kYXJ0JzsNCmltcG9ydCAncGFja2FnZTphdF9ub3RpZnlfZmx1dHRlci9zZXJ2aWNlcy9ub3RpZnlfc2VydmljZS5kYXJ0JzsNCmltcG9ydCAncGFja2FnZTphdF9ub3RpZnlfZmx1dHRlci91dGlscy9pbml0X25vdGlmeV9zZXJ2aWNlLmRhcnQnOw0KaW1wb3J0ICdwYWNrYWdlOmF0X25vdGlmeV9mbHV0dGVyL3V0aWxzL25vdGlmeV91dGlscy5kYXJ0JzsNCg0KaW1wb3J0ICdwYWNrYWdlOmF0X2xvb2t1cC9hdF9sb29rdXAuZGFydCc7DQoNCmltcG9ydCAnbWFpbi5kYXJ0JzsNCg0KLy8qIFRoZSBuZXh0IHNjcmVlbiBhZnRlciBvbmJvYXJkaW5nIChzZWNvbmQgc2NyZWVuKQ0KY2xhc3MgU2Vjb25kU2NyZWVuIGV4dGVuZHMgU3RhdGVmdWxXaWRnZXQgew0KICBjb25zdCBTZWNvbmRTY3JlZW4oe0tleT8ga2V5fSkgOiBzdXBlcihrZXk6IGtleSk7DQoNCiAgQG92ZXJyaWRlDQogIF9TZWNvbmRTY3JlZW5TdGF0ZSBjcmVhdGVTdGF0ZSgpID0+IF9TZWNvbmRTY3JlZW5TdGF0ZSgpOw0KfQ0KDQpjbGFzcyBfU2Vjb25kU2NyZWVuU3RhdGUgZXh0ZW5kcyBTdGF0ZTxTZWNvbmRTY3JlZW4+IHsNCiAgR2xvYmFsS2V5PFNjYWZmb2xkU3RhdGU+IHNjYWZmb2xkS2V5ID0gR2xvYmFsS2V5PFNjYWZmb2xkU3RhdGU+KCk7DQogIFN0cmluZz8gYWN0aXZlQXRTaWduOw0KICB2YXIgYXRDbGllbnRNYW5hZ2VyID0gQXRDbGllbnRNYW5hZ2VyLmdldEluc3RhbmNlKCk7DQogIEF0Q2xpZW50UHJlZmVyZW5jZSBhdENsaWVudFByZWZlcmVuY2UgPSBBdENsaWVudFByZWZlcmVuY2UoKTsNCiAgVGV4dEVkaXRpbmdDb250cm9sbGVyIGF0U2lnbkNvbnRyb2xsZXIgPSBUZXh0RWRpdGluZ0NvbnRyb2xsZXIodGV4dDogJycpOw0KICBUZXh0RWRpdGluZ0NvbnRyb2xsZXIgbWVzc2FnZUNvbnRyb2xsZXIgPSBUZXh0RWRpdGluZ0NvbnRyb2xsZXIodGV4dDogJycpOw0KDQogIEBvdmVycmlkZQ0KICB2b2lkIGluaXRTdGF0ZSgpIHsNCiAgICBnZXRBdFNpZ25BbmRJbml0aWFsaXplTm90aWZ5KCk7DQogICAgc3VwZXIuaW5pdFN0YXRlKCk7DQogIH0NCg0KICBAb3ZlcnJpZGUNCiAgV2lkZ2V0IGJ1aWxkKEJ1aWxkQ29udGV4dCBjb250ZXh0KSB7DQogICAgcmV0dXJuIFNjYWZmb2xkKA0KICAgICAga2V5OiBzY2FmZm9sZEtleSwNCiAgICAgIGFwcEJhcjogQXBwQmFyKA0KICAgICAgICB0aXRsZTogY29uc3QgVGV4dCgnTm90aWZ5IEV4YW1wbGUnKSwNCiAgICAgICksDQogICAgICBib2R5OiBCdWlsZGVyKA0KICAgICAgICBidWlsZGVyOiAoY29udGV4dCkgPT4gQ2VudGVyKA0KICAgICAgICAgIGNoaWxkOiBDb250YWluZXIoDQogICAgICAgICAgICBwYWRkaW5nOiBjb25zdCBFZGdlSW5zZXRzLmFsbCgyMCksDQogICAgICAgICAgICBjaGlsZDogQ29sdW1uKA0KICAgICAgICAgICAgICBtYWluQXhpc1NpemU6IE1haW5BeGlzU2l6ZS5taW4sDQogICAgICAgICAgICAgIGNoaWxkcmVuOiBbDQogICAgICAgICAgICAgICAgVGV4dCgNCiAgICAgICAgICAgICAgICAgICdXZWxjb21lICRhY3RpdmVBdFNpZ24nLA0KICAgICAgICAgICAgICAgICAgc3R5bGU6IGNvbnN0IFRleHRTdHlsZShmb250U2l6ZTogMjApLA0KICAgICAgICAgICAgICAgICksDQogICAgICAgICAgICAgICAgY29uc3QgU2l6ZWRCb3goDQogICAgICAgICAgICAgICAgICBoZWlnaHQ6IDE2LjAsDQogICAgICAgICAgICAgICAgKSwNCiAgICAgICAgICAgICAgICBUZXh0RmllbGQoDQogICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiBhdFNpZ25Db250cm9sbGVyLA0KICAgICAgICAgICAgICAgICAgZGVjb3JhdGlvbjogY29uc3QgSW5wdXREZWNvcmF0aW9uKA0KICAgICAgICAgICAgICAgICAgICAgIGJvcmRlcjogT3V0bGluZUlucHV0Qm9yZGVyKCksIGhpbnRUZXh0OiAnQGF0U2lnbicpLA0KICAgICAgICAgICAgICAgICAgb25DaGFuZ2VkOiAodGV4dCkge30sDQogICAgICAgICAgICAgICAgKSwNCiAgICAgICAgICAgICAgICBjb25zdCBTaXplZEJveCgNCiAgICAgICAgICAgICAgICAgIGhlaWdodDogOC4wLA0KICAgICAgICAgICAgICAgICksDQogICAgICAgICAgICAgICAgVGV4dEZpZWxkKA0KICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogbWVzc2FnZUNvbnRyb2xsZXIsDQogICAgICAgICAgICAgICAgICBkZWNvcmF0aW9uOiBjb25zdCBJbnB1dERlY29yYXRpb24oDQogICAgICAgICAgICAgICAgICAgICAgYm9yZGVyOiBPdXRsaW5lSW5wdXRCb3JkZXIoKSwgaGludFRleHQ6ICdFbnRlciBNZXNzYWdlJyksDQogICAgICAgICAgICAgICAgICBvbkNoYW5nZWQ6ICh0ZXh0KSB7fSwNCiAgICAgICAgICAgICAgICApLA0KICAgICAgICAgICAgICAgIGNvbnN0IFNpemVkQm94KA0KICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAxNi4wLA0KICAgICAgICAgICAgICAgICksDQogICAgICAgICAgICAgICAgVGV4dEJ1dHRvbigNCiAgICAgICAgICAgICAgICAgIG9uUHJlc3NlZDogX3NlbmRNZXNzYWdlLA0KICAgICAgICAgICAgICAgICAgY2hpbGQ6IGNvbnN0IFRleHQoDQogICAgICAgICAgICAgICAgICAgICdOb3RpZnkgVGV4dCcsDQogICAgICAgICAgICAgICAgICAgIHN0eWxlOiBUZXh0U3R5bGUoZm9udFNpemU6IDE2KSwNCiAgICAgICAgICAgICAgICAgICksDQogICAgICAgICAgICAgICAgKSwNCiAgICAgICAgICAgICAgICBUZXh0QnV0dG9uKA0KICAgICAgICAgICAgICAgICAgb25QcmVzc2VkOiAoKSBhc3luYyB7DQogICAgICAgICAgICAgICAgICAgIE5hdmlnYXRvci5wdXNoKA0KICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQsDQogICAgICAgICAgICAgICAgICAgICAgTWF0ZXJpYWxQYWdlUm91dGUoDQogICAgICAgICAgICAgICAgICAgICAgICAgIGJ1aWxkZXI6IChjb250ZXh0KSA9Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTm90aWZ5U2NyZWVuKG5vdGlmeVNlcnZpY2U6IE5vdGlmeVNlcnZpY2UoKSkpLA0KICAgICAgICAgICAgICAgICAgICApOw0KICAgICAgICAgICAgICAgICAgfSwNCiAgICAgICAgICAgICAgICAgIGNoaWxkOiBjb25zdCBUZXh0KA0KICAgICAgICAgICAgICAgICAgICAnR2V0IHBhc3Qgbm90aWZpY2F0aW9ucycsDQogICAgICAgICAgICAgICAgICAgIHN0eWxlOiBUZXh0U3R5bGUoZm9udFNpemU6IDE2KSwNCiAgICAgICAgICAgICAgICAgICksDQogICAgICAgICAgICAgICAgKSwNCiAgICAgICAgICAgICAgXSwNCiAgICAgICAgICAgICksDQogICAgICAgICAgKSwNCiAgICAgICAgKSwNCiAgICAgICksDQogICAgKTsNCiAgfQ0KDQogIF9zZW5kTWVzc2FnZSgpIGFzeW5jIHsNCiAgICBpZiAoYXRTaWduQ29udHJvbGxlci50ZXh0LmlzRW1wdHkpIHsNCiAgICAgIHNob3dTbmFja0JhcignRW50ZXIgYXRzaWduJyk7DQogICAgICByZXR1cm47DQogICAgfQ0KDQogICAgaWYgKG1lc3NhZ2VDb250cm9sbGVyLnRleHQuaXNFbXB0eSkgew0KICAgICAgc2hvd1NuYWNrQmFyKCdFbnRlciBtZXNzYWdlJyk7DQogICAgICByZXR1cm47DQogICAgfQ0KDQogICAgdmFyIF9pc1ZhbGlkQXRzaWduID0gYXdhaXQgY2hlY2tBdHNpZ24oKTsNCiAgICBpZiAoIV9pc1ZhbGlkQXRzaWduKSB7DQogICAgICBzaG93U25hY2tCYXIoJ0F0c2lnbiBub3QgdmFsaWQnKTsNCiAgICAgIHJldHVybjsNCiAgICB9DQoNCiAgICB2YXIgX3JlcyA9IGF3YWl0IG5vdGlmeVRleHQoDQogICAgICBjb250ZXh0LA0KICAgICAgYWN0aXZlQXRTaWduLA0KICAgICAgYXRTaWduQ29udHJvbGxlci50ZXh0LA0KICAgICAgbWVzc2FnZUNvbnRyb2xsZXIudGV4dCwNCiAgICApOw0KICAgIGlmIChfcmVzKSB7DQogICAgICBtZXNzYWdlQ29udHJvbGxlci5jbGVhcigpOw0KICAgICAgc2hvd1NuYWNrQmFyKCdNZXNzYWdlIHNlbnQgc3VjY2VzZnVsbHknLCBjb2xvcjogQ29sb3JzLmdyZWVuKTsNCiAgICB9IGVsc2Ugew0KICAgICAgc2hvd1NuYWNrQmFyKCdTb21ldGhpbmcgd2VudCB3cm9uZycpOw0KICAgIH0NCiAgfQ0KDQogIEZ1dHVyZTxib29sPiBjaGVja0F0c2lnbigpIGFzeW5jIHsNCiAgICBpZiAoYXRTaWduQ29udHJvbGxlci50ZXh0LmlzRW1wdHkpIHsNCiAgICAgIHJldHVybiBmYWxzZTsNCiAgICB9IGVsc2UgaWYgKCFhdFNpZ25Db250cm9sbGVyLnRleHQuY29udGFpbnMoJ0AnKSkgew0KICAgICAgYXRTaWduQ29udHJvbGxlci50ZXh0ID0gJ0AnICsgYXRTaWduQ29udHJvbGxlci50ZXh0Ow0KICAgIH0NCiAgICAvLyBpZ25vcmU6IGRlcHJlY2F0ZWRfbWVtYmVyX3VzZQ0KICAgIHZhciBjaGVja1ByZXNlbmNlID0gYXdhaXQgQXRMb29rdXBJbXBsLmZpbmRTZWNvbmRhcnkoDQogICAgICAgIGF0U2lnbkNvbnRyb2xsZXIudGV4dCwgQXRFbnYucm9vdERvbWFpbiwgNjQpOw0KICAgIHJldHVybiBjaGVja1ByZXNlbmNlICE9IG51bGw7DQogIH0NCg0KICB2b2lkIGdldEF0U2lnbkFuZEluaXRpYWxpemVOb3RpZnkoKSBhc3luYyB7DQogICAgdmFyIGN1cnJlbnRBdFNpZ24gPSBhdENsaWVudE1hbmFnZXIuYXRDbGllbnQuZ2V0Q3VycmVudEF0U2lnbigpOw0KICAgIHNldFN0YXRlKCgpIHsNCiAgICAgIGFjdGl2ZUF0U2lnbiA9IGN1cnJlbnRBdFNpZ247DQogICAgfSk7DQoNCiAgICBhdENsaWVudFByZWZlcmVuY2UgPSBhd2FpdCBsb2FkQXRDbGllbnRQcmVmZXJlbmNlKCk7DQoNCiAgICBpbml0aWFsaXplTm90aWZ5U2VydmljZSgNCiAgICAgIGF0Q2xpZW50TWFuYWdlciwNCiAgICAgIGFjdGl2ZUF0U2lnbiEsDQogICAgICBhdENsaWVudFByZWZlcmVuY2UsDQogICAgICByb290RG9tYWluOiBBdEVudi5yb290RG9tYWluLA0KICAgICk7DQogIH0NCg0KICBzaG93U25hY2tCYXIoU3RyaW5nIHRleHQsIHtDb2xvciBjb2xvciA9IENvbG9ycy5yZWR9KSB7DQogICAgU2NhZmZvbGRNZXNzZW5nZXIub2Yoc2NhZmZvbGRLZXkuY3VycmVudENvbnRleHQhKS5zaG93U25hY2tCYXIoU25hY2tCYXIoDQogICAgICBiYWNrZ3JvdW5kQ29sb3I6IGNvbG9yLA0KICAgICAgZGlzbWlzc0RpcmVjdGlvbjogRGlzbWlzc0RpcmVjdGlvbi5ob3Jpem9udGFsLA0KICAgICAgY29udGVudDogVGV4dCgNCiAgICAgICAgdGV4dCwNCiAgICAgICAgc3R5bGU6IGNvbnN0IFRleHRTdHlsZSgNCiAgICAgICAgICBjb2xvcjogQ29sb3JzLndoaXRlLA0KICAgICAgICAgIGZvbnRTaXplOiAxNCwNCiAgICAgICAgICBsZXR0ZXJTcGFjaW5nOiAwLjEsDQogICAgICAgICAgZm9udFdlaWdodDogRm9udFdlaWdodC5ub3JtYWwsDQogICAgICAgICksDQogICAgICApLA0KICAgICkpOw0KICB9DQp9DQo=",
      "type": "text"
    }
  ],
  "hooks": [],
  "name": "at_notify_flutter",
  "description": "A sample of how to use the at_notify_flutter package",
  "version": "0.1.0",
  "environment": {"mason": "any"},
  "vars": {}
});
