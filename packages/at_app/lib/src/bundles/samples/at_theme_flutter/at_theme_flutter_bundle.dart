// GENERATED CODE - DO NOT MODIFY BY HAND
// ignore_for_file: prefer_single_quotes, public_member_api_docs, lines_longer_than_80_chars, implicit_dynamic_list_literal, implicit_dynamic_map_literal

import 'package:mason/mason.dart';

final atThemeFlutterBundle = MasonBundle.fromJson(<String, dynamic>{
  "files": [
    {
      "path": "lib\\main.dart",
      "data":
          "",
      "type": "text"
    },
    {
      "path": "lib\\src\\pages\\profile_page.dart",
      "data":
          "",
      "type": "text"
    },
    {
      "path": "lib\\src\\utils\\color_constants.dart",
      "data":
          "aW1wb3J0ICdwYWNrYWdlOmZsdXR0ZXIvbWF0ZXJpYWwuZGFydCc7DQoNCmNsYXNzIENvbG9yQ29uc3RhbnRzIHsNCiAgQ29sb3JDb25zdGFudHMuXygpOw0KDQogIHN0YXRpYyBjb25zdCBDb2xvciBwcmltYXJ5RGVmYXVsdCA9IENvbG9yKDB4RkY1ODQxOUMpOw0KDQogIHN0YXRpYyBjb25zdCBDb2xvciBiYWNrZ3JvdW5kTGlnaHQgPSBDb2xvcnMud2hpdGU7DQogIHN0YXRpYyBjb25zdCBDb2xvciBiYWNrZ3JvdW5kRGFyayA9IENvbG9yKDB4RkYzMzMzMzMpOw0KICBzdGF0aWMgY29uc3QgQ29sb3Igc2Vjb25kYXJ5ID0gQ29sb3IoMHhGRkYyNjIzRSk7DQoNCiAgc3RhdGljIGNvbnN0IExpc3Q8Q29sb3I+IHByaW1hcnlDb2xvcnMgPSBbDQogICAgQ29sb3IoMHhGRjU4NDE5QyksDQogICAgQ29sb3IoMHhGRjZFQkNCNyksDQogICAgQ29sb3IoMHhGRjA0NTVCRiksDQogICAgQ29sb3IoMHhGRkZFMTA5NCksDQogICAgQ29sb3IoMHhGRkE3N0Q2MCksDQogICAgQ29sb3IoMHhGRkVGNTc0MyksDQogICAgQ29sb3IoMHhGRjdDQ0IxMiksDQogICAgQ29sb3IoMHhGRkZGQkUyMSksDQogIF07DQp9DQo=",
      "type": "text"
    },
    {
      "path": "lib\\src\\utils\\text_styles.dart",
      "data":
          "aW1wb3J0ICdwYWNrYWdlOmF0X2NvbW1vbl9mbHV0dGVyL3NlcnZpY2VzL3NpemVfY29uZmlnLmRhcnQnOw0KaW1wb3J0ICdwYWNrYWdlOmZsdXR0ZXIvbWF0ZXJpYWwuZGFydCc7DQoNCmNsYXNzIFRleHRTdHlsZXMgew0KICBUZXh0U3R5bGVzLl8oKTsNCg0KICBzdGF0aWMgdmFyIHRleHQxNSA9IFRleHRTdHlsZShmb250U2l6ZTogMTUudG9Gb250KTsNCn0NCg==",
      "type": "text"
    }
  ],
  "hooks": [],
  "name": "at_theme_flutter",
  "description": "A sample of how to use the at_theme_flutter package.",
  "version": "0.1.0",
  "environment": {"mason": "any"},
  "vars": {}
});
