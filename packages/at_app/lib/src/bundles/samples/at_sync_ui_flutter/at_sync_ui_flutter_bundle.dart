// GENERATED CODE - DO NOT MODIFY BY HAND
// ignore_for_file: prefer_single_quotes, public_member_api_docs, lines_longer_than_80_chars, implicit_dynamic_list_literal, implicit_dynamic_map_literal

import 'package:mason/mason.dart';

final atSyncUiFlutterBundle = MasonBundle.fromJson(<String, dynamic>{
  "files": [
    {
      "path": "lib\\main.dart",
      "data":
          "aW1wb3J0ICdkYXJ0OmFzeW5jJzsNCmltcG9ydCAncGFja2FnZTpmbHV0dGVyL21hdGVyaWFsLmRhcnQnOw0KaW1wb3J0ICdwYWNrYWdlOmF0X2NsaWVudF9tb2JpbGUvYXRfY2xpZW50X21vYmlsZS5kYXJ0JzsNCmltcG9ydCAncGFja2FnZTphdF9vbmJvYXJkaW5nX2ZsdXR0ZXIvYXRfb25ib2FyZGluZ19mbHV0dGVyLmRhcnQnDQogICAgc2hvdyBPbmJvYXJkaW5nOw0KaW1wb3J0ICdwYWNrYWdlOmF0X3V0aWxzL2F0X2xvZ2dlci5kYXJ0JyBzaG93IEF0U2lnbkxvZ2dlcjsNCmltcG9ydCAncGFja2FnZTpwYXRoX3Byb3ZpZGVyL3BhdGhfcHJvdmlkZXIuZGFydCcNCiAgICBzaG93IGdldEFwcGxpY2F0aW9uU3VwcG9ydERpcmVjdG9yeTsNCmltcG9ydCAncGFja2FnZTphdF9hcHBfZmx1dHRlci9hdF9hcHBfZmx1dHRlci5kYXJ0JyBzaG93IEF0RW52Ow0KaW1wb3J0ICdzZWNvbmRfc2NyZWVuLmRhcnQnOw0KDQpGdXR1cmU8dm9pZD4gbWFpbigpIGFzeW5jIHsNCiAgYXdhaXQgQXRFbnYubG9hZCgpOw0KICBydW5BcHAoY29uc3QgTXlBcHAoKSk7DQp9DQoNCkZ1dHVyZTxBdENsaWVudFByZWZlcmVuY2U+IGxvYWRBdENsaWVudFByZWZlcmVuY2UoKSBhc3luYyB7DQogIHZhciBkaXIgPSBhd2FpdCBnZXRBcHBsaWNhdGlvblN1cHBvcnREaXJlY3RvcnkoKTsNCiAgcmV0dXJuIEF0Q2xpZW50UHJlZmVyZW5jZSgpDQogICAgLi5yb290RG9tYWluID0gQXRFbnYucm9vdERvbWFpbg0KICAgIC4ubmFtZXNwYWNlID0gQXRFbnYuYXBwTmFtZXNwYWNlDQogICAgLi5oaXZlU3RvcmFnZVBhdGggPSBkaXIucGF0aA0KICAgIC4uY29tbWl0TG9nUGF0aCA9IGRpci5wYXRoDQogICAgLi5pc0xvY2FsU3RvcmVSZXF1aXJlZCA9IHRydWU7DQp9DQoNCmNsYXNzIE15QXBwIGV4dGVuZHMgU3RhdGVmdWxXaWRnZXQgew0KICBjb25zdCBNeUFwcCh7S2V5PyBrZXl9KSA6IHN1cGVyKGtleToga2V5KTsNCiAgQG92ZXJyaWRlDQogIF9NeUFwcFN0YXRlIGNyZWF0ZVN0YXRlKCkgPT4gX015QXBwU3RhdGUoKTsNCn0NCg0KY2xhc3MgX015QXBwU3RhdGUgZXh0ZW5kcyBTdGF0ZTxNeUFwcD4gew0KICAvLyAqIGxvYWQgdGhlIEF0Q2xpZW50UHJlZmVyZW5jZSBpbiB0aGUgYmFja2dyb3VuZA0KICBGdXR1cmU8QXRDbGllbnRQcmVmZXJlbmNlPiBmdXR1cmVQcmVmZXJlbmNlID0gbG9hZEF0Q2xpZW50UHJlZmVyZW5jZSgpOw0KICBBdENsaWVudFByZWZlcmVuY2U/IGF0Q2xpZW50UHJlZmVyZW5jZTsNCiAgQXRDbGllbnRTZXJ2aWNlPyBhdENsaWVudFNlcnZpY2U7DQoNCiAgZmluYWwgQXRTaWduTG9nZ2VyIF9sb2dnZXIgPSBBdFNpZ25Mb2dnZXIoQXRFbnYuYXBwTmFtZXNwYWNlKTsNCg0KICBAb3ZlcnJpZGUNCiAgV2lkZ2V0IGJ1aWxkKEJ1aWxkQ29udGV4dCBjb250ZXh0KSB7DQogICAgcmV0dXJuIE1hdGVyaWFsQXBwKA0KICAgICAgLy8gKiBUaGUgb25ib2FyZGluZyBzY3JlZW4gKGZpcnN0IHNjcmVlbikNCiAgICAgIG5hdmlnYXRvcktleTogTmF2U2VydmljZS5uYXZLZXksDQogICAgICBob21lOiBTY2FmZm9sZCgNCiAgICAgICAgICBhcHBCYXI6IEFwcEJhcigNCiAgICAgICAgICAgIHRpdGxlOiBjb25zdCBUZXh0KCdhdF9zeW5jX3VpX2ZsdXR0ZXIgZXhhbXBsZSBhcHAnKSwNCiAgICAgICAgICApLA0KICAgICAgICAgIGJvZHk6IEJ1aWxkZXIoDQogICAgICAgICAgICBidWlsZGVyOiAoY29udGV4dCkgPT4gQ29sdW1uKA0KICAgICAgICAgICAgICBjaGlsZHJlbjogWw0KICAgICAgICAgICAgICAgIGNvbnN0IFNpemVkQm94KA0KICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAyNSwNCiAgICAgICAgICAgICAgICApLA0KICAgICAgICAgICAgICAgIENlbnRlcigNCiAgICAgICAgICAgICAgICAgIGNoaWxkOiBFbGV2YXRlZEJ1dHRvbigNCiAgICAgICAgICAgICAgICAgICAgb25QcmVzc2VkOiAoKSBhc3luYyB7DQogICAgICAgICAgICAgICAgICAgICAgdmFyIHByZWZlcmVuY2UgPSBhd2FpdCBmdXR1cmVQcmVmZXJlbmNlOw0KICAgICAgICAgICAgICAgICAgICAgIHNldFN0YXRlKCgpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGF0Q2xpZW50UHJlZmVyZW5jZSA9IHByZWZlcmVuY2U7DQogICAgICAgICAgICAgICAgICAgICAgfSk7DQogICAgICAgICAgICAgICAgICAgICAgT25ib2FyZGluZygNCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQ6IGNvbnRleHQsDQogICAgICAgICAgICAgICAgICAgICAgICBhdENsaWVudFByZWZlcmVuY2U6IGF0Q2xpZW50UHJlZmVyZW5jZSEsDQogICAgICAgICAgICAgICAgICAgICAgICBkb21haW46IEF0RW52LnJvb3REb21haW4sDQogICAgICAgICAgICAgICAgICAgICAgICByb290RW52aXJvbm1lbnQ6IEF0RW52LnJvb3RFbnZpcm9ubWVudCwNCiAgICAgICAgICAgICAgICAgICAgICAgIGFwcEFQSUtleTogJzQ3N2ItODc2dS1iY2V6LWM0MnotNmEzZCcsDQogICAgICAgICAgICAgICAgICAgICAgICBvbmJvYXJkOiAoTWFwPFN0cmluZz8sIEF0Q2xpZW50U2VydmljZT4gdmFsdWUsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgU3RyaW5nPyBhdHNpZ24pIGFzeW5jIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgYXRDbGllbnRTZXJ2aWNlID0gdmFsdWVbYXRzaWduXTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgTmF2aWdhdG9yLnB1c2hSZXBsYWNlbWVudCgNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBNYXRlcmlhbFBhZ2VSb3V0ZSgNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBidWlsZGVyOiAoY29udGV4dCkgPT4gU2Vjb25kU2NyZWVuKA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGl2ZUF0U2lnbjogYXRzaWduID8/ICcnLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApKSk7DQogICAgICAgICAgICAgICAgICAgICAgICB9LA0KICAgICAgICAgICAgICAgICAgICAgICAgb25FcnJvcjogKGVycm9yKSBhc3luYyB7DQogICAgICAgICAgICAgICAgICAgICAgICAgIF9sb2dnZXIuc2V2ZXJlKCdPbmJvYXJkaW5nIHRocm93cyAkZXJyb3IgZXJyb3InKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgc2hvd0RpYWxvZygNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQ6IGNvbnRleHQsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBidWlsZGVyOiAoQnVpbGRDb250ZXh0IGNvbnRleHQpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEFsZXJ0RGlhbG9nKA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IGNvbnN0IFRleHQoJ1NvbWV0aGluZyB3ZW50IHdyb25nJyksDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uczogWw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVGV4dEJ1dHRvbigNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvblByZXNzZWQ6ICgpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE5hdmlnYXRvci5vZihjb250ZXh0KS5wb3AoKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkOiBjb25zdCBUZXh0KCdvaycpKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0sDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0sDQogICAgICAgICAgICAgICAgICAgICAgKTsNCiAgICAgICAgICAgICAgICAgICAgfSwNCiAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IGNvbnN0IFRleHQoJ1N0YXJ0IG9uYm9hcmRpbmcnKSwNCiAgICAgICAgICAgICAgICAgICksDQogICAgICAgICAgICAgICAgKSwNCiAgICAgICAgICAgICAgICBjb25zdCBTaXplZEJveCgNCiAgICAgICAgICAgICAgICAgIGhlaWdodDogMjUsDQogICAgICAgICAgICAgICAgKSwNCiAgICAgICAgICAgICAgICBDZW50ZXIoDQogICAgICAgICAgICAgICAgICAgIGNoaWxkOiBUZXh0QnV0dG9uKA0KICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU6IEJ1dHRvblN0eWxlKA0KICAgICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBNYXRlcmlhbFN0YXRlUHJvcGVydHkuYWxsPENvbG9yPihDb2xvcnMuYmxhY2sxMiksDQogICAgICAgICAgICAgICAgICAgICAgICApLA0KICAgICAgICAgICAgICAgICAgICAgICAgb25QcmVzc2VkOiAoKSBhc3luYyB7DQogICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfYXRzaWduc0xpc3QgPSBhd2FpdCBLZXljaGFpblV0aWwuZ2V0QXRzaWduTGlzdCgpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKFN0cmluZyBhdHNpZ24gaW4gKF9hdHNpZ25zTGlzdCA/PyBbXSkpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCBLZXljaGFpblV0aWwucmVzZXRBdFNpZ25Gcm9tS2V5Y2hhaW4oYXRzaWduKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgICAgICAgICAgIFNjYWZmb2xkTWVzc2VuZ2VyLm9mKGNvbnRleHQpLnNob3dTbmFja0JhcigNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IFNuYWNrQmFyKA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IFRleHQoJ0NsZWFyZWQgYWxsIHBhaXJlZCBhdHNpZ25zJykpKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0sDQogICAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogY29uc3QgVGV4dCgnQ2xlYXIgcGFpcmVkIGF0c2lnbnMnLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlOiBUZXh0U3R5bGUoY29sb3I6IENvbG9ycy5ibGFjaykpKSksDQogICAgICAgICAgICAgIF0sDQogICAgICAgICAgICApLA0KICAgICAgICAgICkpLA0KICAgICk7DQogIH0NCn0NCg0KY2xhc3MgTmF2U2VydmljZSB7DQogIHN0YXRpYyBHbG9iYWxLZXk8TmF2aWdhdG9yU3RhdGU+IG5hdktleSA9IEdsb2JhbEtleSgpOw0KfQ0K",
      "type": "text"
    },
    {
      "path": "lib\\second_screen.dart",
      "data":
          "aW1wb3J0ICdwYWNrYWdlOmF0X3N5bmNfdWlfZmx1dHRlci9hdF9zeW5jX3VpLmRhcnQnOw0KaW1wb3J0ICdwYWNrYWdlOmF0X3N5bmNfdWlfZmx1dHRlci9hdF9zeW5jX3VpX2ZsdXR0ZXIuZGFydCc7DQppbXBvcnQgJ3VpX29wdGlvbnMuZGFydCc7DQppbXBvcnQgJ3BhY2thZ2U6Zmx1dHRlci9tYXRlcmlhbC5kYXJ0JzsNCmltcG9ydCAnbWFpbi5kYXJ0JzsNCg0KY2xhc3MgU2Vjb25kU2NyZWVuIGV4dGVuZHMgU3RhdGVmdWxXaWRnZXQgew0KICBmaW5hbCBTdHJpbmcgYWN0aXZlQXRTaWduOw0KICBjb25zdCBTZWNvbmRTY3JlZW4oe3JlcXVpcmVkIHRoaXMuYWN0aXZlQXRTaWduLCBLZXk/IGtleX0pIDogc3VwZXIoa2V5OiBrZXkpOw0KDQogIEBvdmVycmlkZQ0KICBfU2Vjb25kU2NyZWVuU3RhdGUgY3JlYXRlU3RhdGUoKSA9PiBfU2Vjb25kU2NyZWVuU3RhdGUoKTsNCn0NCg0KY2xhc3MgX1NlY29uZFNjcmVlblN0YXRlIGV4dGVuZHMgU3RhdGU8U2Vjb25kU2NyZWVuPiB7DQogIGxhdGUgU3RyaW5nIGFjdGl2ZUF0U2lnbjsNCg0KICBAb3ZlcnJpZGUNCiAgdm9pZCBpbml0U3RhdGUoKSB7DQogICAgdHJ5IHsNCiAgICAgIHN1cGVyLmluaXRTdGF0ZSgpOw0KICAgICAgYWN0aXZlQXRTaWduID0gd2lkZ2V0LmFjdGl2ZUF0U2lnbjsNCiAgICAgIEF0U3luY1VJU2VydmljZSgpLmluaXQoDQogICAgICAgIGFwcE5hdmlnYXRvcjogTmF2U2VydmljZS5uYXZLZXksDQogICAgICAgIG9uU3VjY2Vzc0NhbGxiYWNrOiBfb25TdWNjZXNzQ2FsbGJhY2ssDQogICAgICAgIG9uRXJyb3JDYWxsYmFjazogX29uRXJyb3JDYWxsYmFjaywNCiAgICAgICk7DQogICAgfSBjYXRjaCAoZSkgew0KICAgICAgV2lkZ2V0c0JpbmRpbmcuaW5zdGFuY2UuYWRkUG9zdEZyYW1lQ2FsbGJhY2soKHRpbWVTdGFtcCkgew0KICAgICAgICBzaG93RGlhbG9nKA0KICAgICAgICAgIGNvbnRleHQ6IGNvbnRleHQsDQogICAgICAgICAgYmFycmllckRpc21pc3NpYmxlOiBmYWxzZSwNCiAgICAgICAgICBidWlsZGVyOiAoQnVpbGRDb250ZXh0IGNvbnRleHQpIHsNCiAgICAgICAgICAgIHJldHVybiBhbGVydERpYWxvZ0NvbnRlbnQoKTsNCiAgICAgICAgICB9LA0KICAgICAgICApOw0KICAgICAgfSk7DQogICAgfQ0KICB9DQoNCiAgQG92ZXJyaWRlDQogIHZvaWQgZGlzcG9zZSgpIHsNCiAgICBzdXBlci5kaXNwb3NlKCk7DQogIH0NCg0KICBfb25TdWNjZXNzQ2FsbGJhY2soc3luY1N0YXR1cykgew0KICAgIHNob3dTbmFja0JhcignU3luYyBzdWNjZXNzZnVsJyk7DQogIH0NCg0KICBfb25FcnJvckNhbGxiYWNrKHN5bmNTdGF0dXMpIHsNCiAgICBzaG93U25hY2tCYXIoJ1N5bmMgbm90IHN1Y2Nlc3NmdWwnLCBpc0Vycm9yOiB0cnVlKTsNCiAgfQ0KDQogIEBvdmVycmlkZQ0KICBXaWRnZXQgYnVpbGQoQnVpbGRDb250ZXh0IGNvbnRleHQpIHsNCiAgICByZXR1cm4gU2NhZmZvbGQoDQogICAgICBhcHBCYXI6IEFwcEJhcigNCiAgICAgICAgdGl0bGU6IGNvbnN0IFRleHQoJ1NlY29uZCBTY3JlZW4nKSwNCiAgICAgICksDQogICAgICBib2R5OiBDZW50ZXIoDQogICAgICAgIGNoaWxkOiBMaXN0VmlldygNCiAgICAgICAgICAvLyBtYWluQXhpc1NpemU6IE1haW5BeGlzU2l6ZS5taW4sDQogICAgICAgICAgcGFkZGluZzogY29uc3QgRWRnZUluc2V0cy5hbGwoMjApLA0KICAgICAgICAgIGNoaWxkcmVuOiBbDQogICAgICAgICAgICBDb250YWluZXIoDQogICAgICAgICAgICAgIHBhZGRpbmc6IGNvbnN0IEVkZ2VJbnNldHMub25seSh0b3A6IDIwLjAsIGJvdHRvbTogMjAuMCksDQogICAgICAgICAgICAgIGNoaWxkOiBUZXh0KA0KICAgICAgICAgICAgICAgICdXZWxjb21lICRhY3RpdmVBdFNpZ24hJywNCiAgICAgICAgICAgICAgICBzdHlsZTogY29uc3QgVGV4dFN0eWxlKGZvbnRTaXplOiAyMCksDQogICAgICAgICAgICAgICksDQogICAgICAgICAgICApLA0KICAgICAgICAgICAgRWxldmF0ZWRCdXR0b24oDQogICAgICAgICAgICAgIG9uUHJlc3NlZDogKCkgYXN5bmMgew0KICAgICAgICAgICAgICAgIGF3YWl0IEF0U3luY1VJU2VydmljZSgpLnN5bmMoKTsNCiAgICAgICAgICAgICAgfSwNCiAgICAgICAgICAgICAgY2hpbGQ6IGNvbnN0IFRleHQoJ0RlZmF1bHQgU3luYycpLA0KICAgICAgICAgICAgKSwNCiAgICAgICAgICAgIEVsZXZhdGVkQnV0dG9uKA0KICAgICAgICAgICAgICBvblByZXNzZWQ6ICgpIGFzeW5jIHsNCiAgICAgICAgICAgICAgICBhd2FpdCBBdFN5bmNVSVNlcnZpY2UoKS5zeW5jKA0KICAgICAgICAgICAgICAgICAgYXRTeW5jVUlPdmVybGF5OiBBdFN5bmNVSU92ZXJsYXkuZGlhbG9nLA0KICAgICAgICAgICAgICAgICk7DQogICAgICAgICAgICAgIH0sDQogICAgICAgICAgICAgIGNoaWxkOiBjb25zdCBUZXh0KCdTeW5jIHdpdGggZGlhbG9nIG92ZXJsYXknKSwNCiAgICAgICAgICAgICksDQogICAgICAgICAgICBFbGV2YXRlZEJ1dHRvbigNCiAgICAgICAgICAgICAgb25QcmVzc2VkOiAoKSBhc3luYyB7DQogICAgICAgICAgICAgICAgYXdhaXQgQXRTeW5jVUlTZXJ2aWNlKCkuc3luYygNCiAgICAgICAgICAgICAgICAgIGF0U3luY1VJT3ZlcmxheTogQXRTeW5jVUlPdmVybGF5LnNuYWNrYmFyLA0KICAgICAgICAgICAgICAgICk7DQogICAgICAgICAgICAgIH0sDQogICAgICAgICAgICAgIGNoaWxkOiBjb25zdCBUZXh0KCdTeW5jIHdpdGggc25hY2tiYXInKSwNCiAgICAgICAgICAgICksDQogICAgICAgICAgICBFbGV2YXRlZEJ1dHRvbigNCiAgICAgICAgICAgICAgb25QcmVzc2VkOiAoKSBhc3luYyB7DQogICAgICAgICAgICAgICAgTmF2aWdhdG9yLnB1c2goY29udGV4dCwNCiAgICAgICAgICAgICAgICAgICAgTWF0ZXJpYWxQYWdlUm91dGUoYnVpbGRlcjogKGNvbnRleHQpID0+IGNvbnN0IFVJT3B0aW9ucygpKSk7DQogICAgICAgICAgICAgIH0sDQogICAgICAgICAgICAgIGNoaWxkOiBjb25zdCBUZXh0KCdTZWUgYWxsIFVJIG9wdGlvbnMnKSwNCiAgICAgICAgICAgICksDQogICAgICAgICAgXSwNCiAgICAgICAgKSwNCiAgICAgICksDQogICAgKTsNCiAgfQ0KDQogIFdpZGdldCBhbGVydERpYWxvZ0NvbnRlbnQoKSB7DQogICAgcmV0dXJuIEFsZXJ0RGlhbG9nKA0KICAgICAgdGl0bGU6IGNvbnN0IFRleHQoJ3lvdSBhcmUgbm90IGF1dGhlbnRpY2F0ZWQuJyksDQogICAgICBhY3Rpb25zOiBbDQogICAgICAgIFRleHRCdXR0b24oDQogICAgICAgICAgb25QcmVzc2VkOiAoKSBhc3luYyB7DQogICAgICAgICAgICBOYXZpZ2F0b3Iub2YoY29udGV4dCkucG9wKCk7DQogICAgICAgICAgICBOYXZpZ2F0b3Iub2YoY29udGV4dCkucG9wKCk7DQogICAgICAgICAgfSwNCiAgICAgICAgICBjaGlsZDogY29uc3QgVGV4dCgNCiAgICAgICAgICAgICdPaycsDQogICAgICAgICAgICBzdHlsZTogVGV4dFN0eWxlKGNvbG9yOiBDb2xvcnMuYmxhY2spLA0KICAgICAgICAgICksDQogICAgICAgICksDQogICAgICBdLA0KICAgICk7DQogIH0NCg0KICB2b2lkIHNob3dTbmFja0JhcihTdHJpbmcgbXNnLCB7Ym9vbCBpc0Vycm9yID0gZmFsc2V9KSB7DQogICAgU2NhZmZvbGRNZXNzZW5nZXIub2YoTmF2U2VydmljZS5uYXZLZXkuY3VycmVudENvbnRleHQhKQ0KICAgICAgICAuc2hvd1NuYWNrQmFyKFNuYWNrQmFyKA0KICAgICAgYmFja2dyb3VuZENvbG9yOiBpc0Vycm9yID8gY29uc3QgQ29sb3IoMHhGRmUzNDA0MCkgOiBDb2xvcnMuZ3JlZW4sDQogICAgICBjb250ZW50OiBUZXh0KA0KICAgICAgICBtc2csDQogICAgICAgIHN0eWxlOiBjb25zdCBUZXh0U3R5bGUoDQogICAgICAgICAgICBjb2xvcjogQ29sb3JzLndoaXRlLA0KICAgICAgICAgICAgZm9udFNpemU6IDE2LA0KICAgICAgICAgICAgbGV0dGVyU3BhY2luZzogMC4xLA0KICAgICAgICAgICAgZm9udFdlaWdodDogRm9udFdlaWdodC5ub3JtYWwpLA0KICAgICAgKSwNCiAgICApKTsNCiAgfQ0KfQ0K",
      "type": "text"
    },
    {
      "path": "lib\\ui_options.dart",
      "data":
          "aW1wb3J0ICdkYXJ0OmRldmVsb3Blcic7DQoNCmltcG9ydCAncGFja2FnZTphdF9zeW5jX3VpX2ZsdXR0ZXIvYXRfc3luY19tYXRlcmlhbC5kYXJ0JyBhcyBtYXRlcmlhbDsNCmltcG9ydCAncGFja2FnZTphdF9zeW5jX3VpX2ZsdXR0ZXIvYXRfc3luY19jdXBlcnRpbm8uZGFydCcgYXMgY3VwZXJ0aW5vOw0KaW1wb3J0ICdwYWNrYWdlOmZsdXR0ZXIvY3VwZXJ0aW5vLmRhcnQnOw0KaW1wb3J0ICdwYWNrYWdlOmZsdXR0ZXIvbWF0ZXJpYWwuZGFydCc7DQppbXBvcnQgJ3BhY2thZ2U6Zmx1dHRlcl9jb2xvcnBpY2tlci9mbHV0dGVyX2NvbG9ycGlja2VyLmRhcnQnOw0KaW1wb3J0ICdwYWNrYWdlOmF0X3N5bmNfdWlfZmx1dHRlci9hdF9zeW5jX3VpLmRhcnQnOw0KDQpjb25zdCBkb3VibGUgX2tOb3JtYWxQYWRkaW5nID0gMTY7DQpjb25zdCBkb3VibGUgX2tTbWFsbFBhZGRpbmcgPSA4Ow0KY29uc3QgZG91YmxlIF9rTGFyZ2VQYWRkaW5nID0gMzI7DQpjb25zdCBDb2xvciBfa1ByaW1hcnlDb2xvciA9IENvbG9yKDB4RkZmNDUzM2QpOw0KDQpjbGFzcyBVSU9wdGlvbnMgZXh0ZW5kcyBTdGF0ZWxlc3NXaWRnZXQgew0KICBjb25zdCBVSU9wdGlvbnMoe0tleT8ga2V5fSkgOiBzdXBlcihrZXk6IGtleSk7DQogIHN0YXRpYyBmaW5hbCBuYXZLZXkgPSBHbG9iYWxLZXk8TmF2aWdhdG9yU3RhdGU+KCk7DQoNCiAgQG92ZXJyaWRlDQogIFdpZGdldCBidWlsZChCdWlsZENvbnRleHQgY29udGV4dCkgew0KICAgIEF0U3luY1VJLmluc3RhbmNlLnNldEFwcE5hdmlnYXRvcktleShuYXZLZXkpOw0KICAgIEF0U3luY1VJLmluc3RhbmNlLmNvbmZpZ1RoZW1lKA0KICAgICAgcHJpbWFyeUNvbG9yOiBDb2xvcnMucmVkLA0KICAgICAgYmFja2dyb3VuZENvbG9yOiBDb2xvcnMueWVsbG93LA0KICAgICAgbGFiZWxDb2xvcjogQ29sb3JzLmdyZWVuLA0KICAgICAgc3R5bGU6IEF0U3luY1VJU3R5bGUubWF0ZXJpYWwsDQogICAgKTsNCiAgICBBdFN5bmNVSS5pbnN0YW5jZS5zZXR1cENvbnRyb2xsZXIoY29udHJvbGxlcjogQXRTeW5jVUlDb250cm9sbGVyKCkpOw0KICAgIHJldHVybiBNYXRlcmlhbEFwcCgNCiAgICAgIHRpdGxlOiAnQXRTeW5jIFdpZGdldCcsDQogICAgICBuYXZpZ2F0b3JLZXk6IG5hdktleSwNCiAgICAgIHRoZW1lOiBUaGVtZURhdGEoDQogICAgICAgIHByaW1hcnlTd2F0Y2g6IENvbG9ycy5ibHVlLA0KICAgICAgKSwNCiAgICAgIGhvbWU6IGNvbnN0IE15SG9tZVBhZ2UoKSwNCiAgICApOw0KICB9DQp9DQoNCmNsYXNzIE15SG9tZVBhZ2UgZXh0ZW5kcyBTdGF0ZWZ1bFdpZGdldCB7DQogIGNvbnN0IE15SG9tZVBhZ2Uoe0tleT8ga2V5fSkgOiBzdXBlcihrZXk6IGtleSk7DQoNCiAgQG92ZXJyaWRlDQogIFN0YXRlPE15SG9tZVBhZ2U+IGNyZWF0ZVN0YXRlKCkgPT4gX015SG9tZVBhZ2VTdGF0ZSgpOw0KfQ0KDQpjbGFzcyBfTXlIb21lUGFnZVN0YXRlIGV4dGVuZHMgU3RhdGU8TXlIb21lUGFnZT4NCiAgICB3aXRoIFNpbmdsZVRpY2tlclByb3ZpZGVyU3RhdGVNaXhpbiB7DQogIGJvb2wgaXNMb2FkaW5nID0gZmFsc2U7DQogIGRvdWJsZSBwcm9ncmVzcyA9IDAuMDsNCg0KICBDb2xvciBfaW5kaWNhdG9yQ29sb3IgPSBfa1ByaW1hcnlDb2xvcjsNCg0KICBsYXRlIEFuaW1hdGlvbjxkb3VibGU+IGFuaW1hdGlvbjsNCiAgbGF0ZSBBbmltYXRpb25Db250cm9sbGVyIGNvbnRyb2xsZXI7DQoNCiAgQG92ZXJyaWRlDQogIHZvaWQgaW5pdFN0YXRlKCkgew0KICAgIHN1cGVyLmluaXRTdGF0ZSgpOw0KDQogICAgY29udHJvbGxlciA9DQogICAgICAgIEFuaW1hdGlvbkNvbnRyb2xsZXIoZHVyYXRpb246IGNvbnN0IER1cmF0aW9uKHNlY29uZHM6IDUpLCB2c3luYzogdGhpcyk7DQogICAgYW5pbWF0aW9uID0gVHdlZW48ZG91YmxlPihiZWdpbjogMC4wLCBlbmQ6IDEuMCkuYW5pbWF0ZShjb250cm9sbGVyKQ0KICAgICAgLi5hZGRMaXN0ZW5lcigoKSB7DQogICAgICAgIHNldFN0YXRlKCgpIHsNCiAgICAgICAgICBwcm9ncmVzcyA9IGFuaW1hdGlvbi52YWx1ZTsNCiAgICAgICAgfSk7DQogICAgICB9KTsNCiAgfQ0KDQogIEBvdmVycmlkZQ0KICBXaWRnZXQgYnVpbGQoQnVpbGRDb250ZXh0IGNvbnRleHQpIHsNCiAgICByZXR1cm4gU2NhZmZvbGQoDQogICAgICBhcHBCYXI6IEFwcEJhcigNCiAgICAgICAgdGl0bGU6IGNvbnN0IFRleHQoJ0F0U3luYyBXaWRnZXQnKSwNCiAgICAgICAgYWN0aW9uczogWw0KICAgICAgICAgIG1hdGVyaWFsLkF0U3luY0J1dHRvbigNCiAgICAgICAgICAgIGlzTG9hZGluZzogaXNMb2FkaW5nLA0KICAgICAgICAgICAgc3luY0luZGljYXRvckNvbG9yOiBDb2xvcnMud2hpdGUsDQogICAgICAgICAgICBjaGlsZDogSWNvbkJ1dHRvbigNCiAgICAgICAgICAgICAgaWNvbjogY29uc3QgSWNvbihJY29ucy5hbmRyb2lkKSwNCiAgICAgICAgICAgICAgb25QcmVzc2VkOiBfc3RhcnRMb2FkaW5nLA0KICAgICAgICAgICAgKSwNCiAgICAgICAgICApLA0KICAgICAgICAgIGN1cGVydGluby5BdFN5bmNCdXR0b24oDQogICAgICAgICAgICBpc0xvYWRpbmc6IGlzTG9hZGluZywNCiAgICAgICAgICAgIHN5bmNJbmRpY2F0b3JDb2xvcjogQ29sb3JzLndoaXRlLA0KICAgICAgICAgICAgY2hpbGQ6IEljb25CdXR0b24oDQogICAgICAgICAgICAgIGljb246IGNvbnN0IEljb24oSWNvbnMucGhvbmVfaXBob25lKSwNCiAgICAgICAgICAgICAgb25QcmVzc2VkOiBfc3RhcnRMb2FkaW5nLA0KICAgICAgICAgICAgKSwNCiAgICAgICAgICApLA0KICAgICAgICAgIEljb25CdXR0b24oDQogICAgICAgICAgICBpY29uOiBjb25zdCBJY29uKEljb25zLnBhbGV0dGUpLA0KICAgICAgICAgICAgb25QcmVzc2VkOiBfc2hvd0NvbG9yUGlja2VyLA0KICAgICAgICAgICksDQogICAgICAgIF0sDQogICAgICApLA0KICAgICAgYm9keTogU2FmZUFyZWEoDQogICAgICAgIGNoaWxkOiBTaW5nbGVDaGlsZFNjcm9sbFZpZXcoDQogICAgICAgICAgcGFkZGluZzogY29uc3QgRWRnZUluc2V0cy5zeW1tZXRyaWMoaG9yaXpvbnRhbDogX2tOb3JtYWxQYWRkaW5nKSwNCiAgICAgICAgICBjaGlsZDogQ29sdW1uKA0KICAgICAgICAgICAgbWFpbkF4aXNBbGlnbm1lbnQ6IE1haW5BeGlzQWxpZ25tZW50LnN0YXJ0LA0KICAgICAgICAgICAgY3Jvc3NBeGlzQWxpZ25tZW50OiBDcm9zc0F4aXNBbGlnbm1lbnQuY2VudGVyLA0KICAgICAgICAgICAgY2hpbGRyZW46IDxXaWRnZXQ+Ww0KICAgICAgICAgICAgICBjb25zdCBTaXplZEJveChoZWlnaHQ6IF9rTm9ybWFsUGFkZGluZyksDQogICAgICAgICAgICAgIFJvdygNCiAgICAgICAgICAgICAgICBtYWluQXhpc0FsaWdubWVudDogTWFpbkF4aXNBbGlnbm1lbnQuc3BhY2VBcm91bmQsDQogICAgICAgICAgICAgICAgY2hpbGRyZW46IGNvbnN0IFsNCiAgICAgICAgICAgICAgICAgIFRleHQoJ01hdGVyaWFsJywNCiAgICAgICAgICAgICAgICAgICAgICBzdHlsZTogVGV4dFN0eWxlKGZvbnRXZWlnaHQ6IEZvbnRXZWlnaHQuYm9sZCkpLA0KICAgICAgICAgICAgICAgICAgVGV4dCgnQ3VwZXJ0aW5vJywNCiAgICAgICAgICAgICAgICAgICAgICBzdHlsZTogVGV4dFN0eWxlKGZvbnRXZWlnaHQ6IEZvbnRXZWlnaHQuYm9sZCkpLA0KICAgICAgICAgICAgICAgIF0sDQogICAgICAgICAgICAgICksDQogICAgICAgICAgICAgIGNvbnN0IFNpemVkQm94KGhlaWdodDogX2tOb3JtYWxQYWRkaW5nKSwNCiAgICAgICAgICAgICAgY29uc3QgVGV4dCgnQXRTeW5jSWNvbicpLA0KICAgICAgICAgICAgICBjb25zdCBTaXplZEJveChoZWlnaHQ6IF9rU21hbGxQYWRkaW5nKSwNCiAgICAgICAgICAgICAgUm93KA0KICAgICAgICAgICAgICAgIG1haW5BeGlzQWxpZ25tZW50OiBNYWluQXhpc0FsaWdubWVudC5zcGFjZUFyb3VuZCwNCiAgICAgICAgICAgICAgICBjaGlsZHJlbjogWw0KICAgICAgICAgICAgICAgICAgbWF0ZXJpYWwuQXRTeW5jSW5kaWNhdG9yKA0KICAgICAgICAgICAgICAgICAgICBjb2xvcjogX2luZGljYXRvckNvbG9yLA0KICAgICAgICAgICAgICAgICAgKSwNCiAgICAgICAgICAgICAgICAgIGN1cGVydGluby5BdFN5bmNJbmRpY2F0b3IoDQogICAgICAgICAgICAgICAgICAgIGNvbG9yOiBfaW5kaWNhdG9yQ29sb3IsDQogICAgICAgICAgICAgICAgICApLA0KICAgICAgICAgICAgICAgIF0sDQogICAgICAgICAgICAgICksDQogICAgICAgICAgICAgIGNvbnN0IFNpemVkQm94KGhlaWdodDogX2tMYXJnZVBhZGRpbmcpLA0KICAgICAgICAgICAgICBSb3coDQogICAgICAgICAgICAgICAgbWFpbkF4aXNBbGlnbm1lbnQ6IE1haW5BeGlzQWxpZ25tZW50LnNwYWNlQXJvdW5kLA0KICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBbDQogICAgICAgICAgICAgICAgICBtYXRlcmlhbC5BdFN5bmNJbmRpY2F0b3IoDQogICAgICAgICAgICAgICAgICAgIHJhZGl1czogMjQsDQogICAgICAgICAgICAgICAgICAgIGNvbG9yOiBfaW5kaWNhdG9yQ29sb3IsDQogICAgICAgICAgICAgICAgICApLA0KICAgICAgICAgICAgICAgICAgY3VwZXJ0aW5vLkF0U3luY0luZGljYXRvcigNCiAgICAgICAgICAgICAgICAgICAgcmFkaXVzOiAyNCwNCiAgICAgICAgICAgICAgICAgICAgY29sb3I6IF9pbmRpY2F0b3JDb2xvciwNCiAgICAgICAgICAgICAgICAgICksDQogICAgICAgICAgICAgICAgXSwNCiAgICAgICAgICAgICAgKSwNCiAgICAgICAgICAgICAgY29uc3QgU2l6ZWRCb3goaGVpZ2h0OiBfa0xhcmdlUGFkZGluZyksDQogICAgICAgICAgICAgIGNvbnN0IFRleHQoJ0F0U3luY0ljb25CdXR0b24nKSwNCiAgICAgICAgICAgICAgY29uc3QgU2l6ZWRCb3goaGVpZ2h0OiBfa1NtYWxsUGFkZGluZyksDQogICAgICAgICAgICAgIFJvdygNCiAgICAgICAgICAgICAgICBtYWluQXhpc0FsaWdubWVudDogTWFpbkF4aXNBbGlnbm1lbnQuc3BhY2VBcm91bmQsDQogICAgICAgICAgICAgICAgY2hpbGRyZW46IFsNCiAgICAgICAgICAgICAgICAgIG1hdGVyaWFsLkF0U3luY0J1dHRvbigNCiAgICAgICAgICAgICAgICAgICAgaXNMb2FkaW5nOiBpc0xvYWRpbmcsDQogICAgICAgICAgICAgICAgICAgIHN5bmNJbmRpY2F0b3JDb2xvcjogX2luZGljYXRvckNvbG9yLA0KICAgICAgICAgICAgICAgICAgICBjaGlsZDogRWxldmF0ZWRCdXR0b24oDQogICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IGNvbnN0IFRleHQoJ01hdGVyaWFsJyksDQogICAgICAgICAgICAgICAgICAgICAgb25QcmVzc2VkOiBfc3RhcnRMb2FkaW5nLA0KICAgICAgICAgICAgICAgICAgICApLA0KICAgICAgICAgICAgICAgICAgKSwNCiAgICAgICAgICAgICAgICAgIGN1cGVydGluby5BdFN5bmNCdXR0b24oDQogICAgICAgICAgICAgICAgICAgIGlzTG9hZGluZzogaXNMb2FkaW5nLA0KICAgICAgICAgICAgICAgICAgICBzeW5jSW5kaWNhdG9yQ29sb3I6IF9pbmRpY2F0b3JDb2xvciwNCiAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IEN1cGVydGlub0J1dHRvbigNCiAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogY29uc3QgVGV4dCgnQ3VwZXJ0aW5vJyksDQogICAgICAgICAgICAgICAgICAgICAgY29sb3I6IENvbG9ycy5ncmV5LA0KICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IGNvbnN0IEVkZ2VJbnNldHMuc3ltbWV0cmljKGhvcml6b250YWw6IDgpLA0KICAgICAgICAgICAgICAgICAgICAgIG9uUHJlc3NlZDogX3N0YXJ0TG9hZGluZywNCiAgICAgICAgICAgICAgICAgICAgKSwNCiAgICAgICAgICAgICAgICAgICksDQogICAgICAgICAgICAgICAgXSwNCiAgICAgICAgICAgICAgKSwNCiAgICAgICAgICAgICAgY29uc3QgU2l6ZWRCb3goaGVpZ2h0OiBfa0xhcmdlUGFkZGluZyksDQogICAgICAgICAgICAgIGNvbnN0IFRleHQoJ0F0U3luY0NpcmN1bGFyUHJvZ3Jlc3NJbmRpY2F0b3InKSwNCiAgICAgICAgICAgICAgY29uc3QgU2l6ZWRCb3goaGVpZ2h0OiBfa1NtYWxsUGFkZGluZyksDQogICAgICAgICAgICAgIFJvdygNCiAgICAgICAgICAgICAgICBtYWluQXhpc0FsaWdubWVudDogTWFpbkF4aXNBbGlnbm1lbnQuc3BhY2VBcm91bmQsDQogICAgICAgICAgICAgICAgY2hpbGRyZW46IFsNCiAgICAgICAgICAgICAgICAgIG1hdGVyaWFsLkF0U3luY0luZGljYXRvcigNCiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHByb2dyZXNzLA0KICAgICAgICAgICAgICAgICAgICBjb2xvcjogX2luZGljYXRvckNvbG9yLA0KICAgICAgICAgICAgICAgICAgKSwNCiAgICAgICAgICAgICAgICAgIGN1cGVydGluby5BdFN5bmNJbmRpY2F0b3IoDQogICAgICAgICAgICAgICAgICAgIHZhbHVlOiBwcm9ncmVzcywNCiAgICAgICAgICAgICAgICAgICAgY29sb3I6IF9pbmRpY2F0b3JDb2xvciwNCiAgICAgICAgICAgICAgICAgICksDQogICAgICAgICAgICAgICAgXSwNCiAgICAgICAgICAgICAgKSwNCiAgICAgICAgICAgICAgY29uc3QgU2l6ZWRCb3goaGVpZ2h0OiBfa0xhcmdlUGFkZGluZyksDQogICAgICAgICAgICAgIGNvbnN0IFRleHQoJ0F0U3luY0xpbmVhclByb2dyZXNzSW5kaWNhdG9yJyksDQogICAgICAgICAgICAgIGNvbnN0IFNpemVkQm94KGhlaWdodDogX2tTbWFsbFBhZGRpbmcpLA0KICAgICAgICAgICAgICBSb3coDQogICAgICAgICAgICAgICAgbWFpbkF4aXNBbGlnbm1lbnQ6IE1haW5BeGlzQWxpZ25tZW50LnNwYWNlQXJvdW5kLA0KICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBbDQogICAgICAgICAgICAgICAgICBFeHBhbmRlZCgNCiAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG1hdGVyaWFsLkF0U3luY0xpbmVhclByb2dyZXNzSW5kaWNhdG9yKA0KICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBfaW5kaWNhdG9yQ29sb3IsDQogICAgICAgICAgICAgICAgICAgICksDQogICAgICAgICAgICAgICAgICApLA0KICAgICAgICAgICAgICAgICAgY29uc3QgU2l6ZWRCb3god2lkdGg6IF9rU21hbGxQYWRkaW5nKSwNCiAgICAgICAgICAgICAgICAgIEV4cGFuZGVkKA0KICAgICAgICAgICAgICAgICAgICBjaGlsZDogY3VwZXJ0aW5vLkF0U3luY0xpbmVhclByb2dyZXNzSW5kaWNhdG9yKA0KICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBfaW5kaWNhdG9yQ29sb3IsDQogICAgICAgICAgICAgICAgICAgICksDQogICAgICAgICAgICAgICAgICApLA0KICAgICAgICAgICAgICAgIF0sDQogICAgICAgICAgICAgICksDQogICAgICAgICAgICAgIGNvbnN0IFNpemVkQm94KGhlaWdodDogX2tTbWFsbFBhZGRpbmcpLA0KICAgICAgICAgICAgICBSb3coDQogICAgICAgICAgICAgICAgbWFpbkF4aXNBbGlnbm1lbnQ6IE1haW5BeGlzQWxpZ25tZW50LnNwYWNlQXJvdW5kLA0KICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBbDQogICAgICAgICAgICAgICAgICBFeHBhbmRlZCgNCiAgICAgICAgICAgICAgICAgICAgZmxleDogMSwNCiAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IG1hdGVyaWFsLkF0U3luY0xpbmVhclByb2dyZXNzSW5kaWNhdG9yKA0KICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBwcm9ncmVzcywNCiAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogX2luZGljYXRvckNvbG9yLA0KICAgICAgICAgICAgICAgICAgICApLA0KICAgICAgICAgICAgICAgICAgKSwNCiAgICAgICAgICAgICAgICAgIGNvbnN0IFNpemVkQm94KHdpZHRoOiBfa1NtYWxsUGFkZGluZyksDQogICAgICAgICAgICAgICAgICBFeHBhbmRlZCgNCiAgICAgICAgICAgICAgICAgICAgZmxleDogMSwNCiAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IGN1cGVydGluby5BdFN5bmNMaW5lYXJQcm9ncmVzc0luZGljYXRvcigNCiAgICAgICAgICAgICAgICAgICAgICBwcm9ncmVzczogcHJvZ3Jlc3MsDQogICAgICAgICAgICAgICAgICAgICAgbWluSGVpZ2h0OiAyMCwNCiAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogX2luZGljYXRvckNvbG9yLA0KICAgICAgICAgICAgICAgICAgICApLA0KICAgICAgICAgICAgICAgICAgKSwNCiAgICAgICAgICAgICAgICBdLA0KICAgICAgICAgICAgICApLA0KICAgICAgICAgICAgICBjb25zdCBTaXplZEJveChoZWlnaHQ6IF9rTGFyZ2VQYWRkaW5nKSwNCiAgICAgICAgICAgICAgY29uc3QgVGV4dCgnQXRTeW5jVGV4dCcpLA0KICAgICAgICAgICAgICBjb25zdCBTaXplZEJveChoZWlnaHQ6IF9rU21hbGxQYWRkaW5nKSwNCiAgICAgICAgICAgICAgUm93KA0KICAgICAgICAgICAgICAgIG1haW5BeGlzQWxpZ25tZW50OiBNYWluQXhpc0FsaWdubWVudC5zcGFjZUFyb3VuZCwNCiAgICAgICAgICAgICAgICBjaGlsZHJlbjogWw0KICAgICAgICAgICAgICAgICAgRXhwYW5kZWQoDQogICAgICAgICAgICAgICAgICAgIGZsZXg6IDEsDQogICAgICAgICAgICAgICAgICAgIGNoaWxkOiBtYXRlcmlhbC5BdFN5bmNUZXh0KA0KICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBwcm9ncmVzcywNCiAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogY29uc3QgVGV4dCgnY29tcGxldGVkJyksDQogICAgICAgICAgICAgICAgICAgICAgaW5kaWNhdG9yQ29sb3I6IF9pbmRpY2F0b3JDb2xvciwNCiAgICAgICAgICAgICAgICAgICAgKSwNCiAgICAgICAgICAgICAgICAgICksDQogICAgICAgICAgICAgICAgICBFeHBhbmRlZCgNCiAgICAgICAgICAgICAgICAgICAgZmxleDogMSwNCiAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IGN1cGVydGluby5BdFN5bmNUZXh0KA0KICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBwcm9ncmVzcywNCiAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogY29uc3QgVGV4dCgnY29tcGxldGVkJyksDQogICAgICAgICAgICAgICAgICAgICAgaW5kaWNhdG9yQ29sb3I6IF9pbmRpY2F0b3JDb2xvciwNCiAgICAgICAgICAgICAgICAgICAgKSwNCiAgICAgICAgICAgICAgICAgICksDQogICAgICAgICAgICAgICAgXSwNCiAgICAgICAgICAgICAgKSwNCiAgICAgICAgICAgICAgUm93KA0KICAgICAgICAgICAgICAgIG1haW5BeGlzQWxpZ25tZW50OiBNYWluQXhpc0FsaWdubWVudC5zcGFjZUFyb3VuZCwNCiAgICAgICAgICAgICAgICBjaGlsZHJlbjogWw0KICAgICAgICAgICAgICAgICAgVGV4dEJ1dHRvbigNCiAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IGNvbnN0IFRleHQoJ01hdGVyaWFsIERpYWxvZycpLA0KICAgICAgICAgICAgICAgICAgICBvblByZXNzZWQ6IF9zdGFydE1hdGVyaWFsRGlhbG9nLA0KICAgICAgICAgICAgICAgICAgKSwNCiAgICAgICAgICAgICAgICAgIFRleHRCdXR0b24oDQogICAgICAgICAgICAgICAgICAgIGNoaWxkOiBjb25zdCBUZXh0KCdDdXBlcnRpbm8gRGlhbG9nJyksDQogICAgICAgICAgICAgICAgICAgIG9uUHJlc3NlZDogX3N0YXJ0Q3VwZXJ0aW5vRGlhbG9nLA0KICAgICAgICAgICAgICAgICAgKSwNCiAgICAgICAgICAgICAgICBdLA0KICAgICAgICAgICAgICApLA0KICAgICAgICAgICAgICBSb3coDQogICAgICAgICAgICAgICAgbWFpbkF4aXNBbGlnbm1lbnQ6IE1haW5BeGlzQWxpZ25tZW50LnNwYWNlQXJvdW5kLA0KICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBbDQogICAgICAgICAgICAgICAgICBUZXh0QnV0dG9uKA0KICAgICAgICAgICAgICAgICAgICBjaGlsZDogY29uc3QgVGV4dCgnTWF0ZXJpYWwgU25hY2tCYXInKSwNCiAgICAgICAgICAgICAgICAgICAgb25QcmVzc2VkOiBfc3RhcnRNYXRlcmlhbFNuYWNrQmFyLA0KICAgICAgICAgICAgICAgICAgKSwNCiAgICAgICAgICAgICAgICAgIFRleHRCdXR0b24oDQogICAgICAgICAgICAgICAgICAgIGNoaWxkOiBjb25zdCBUZXh0KCdDdXBlcnRpbm8gU25hY2tCYXInKSwNCiAgICAgICAgICAgICAgICAgICAgb25QcmVzc2VkOiBfc3RhcnRDdXBlcnRpbm9TbmFja0JhciwNCiAgICAgICAgICAgICAgICAgICksDQogICAgICAgICAgICAgICAgXSwNCiAgICAgICAgICAgICAgKSwNCiAgICAgICAgICAgICAgUm93KA0KICAgICAgICAgICAgICAgIG1haW5BeGlzQWxpZ25tZW50OiBNYWluQXhpc0FsaWdubWVudC5zcGFjZUFyb3VuZCwNCiAgICAgICAgICAgICAgICBjaGlsZHJlbjogWw0KICAgICAgICAgICAgICAgICAgVGV4dEJ1dHRvbigNCiAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IGNvbnN0IFRleHQoJ0xvYWRpbmcgRGlhbG9nJyksDQogICAgICAgICAgICAgICAgICAgIG9uUHJlc3NlZDogX3Nob3dMb2FkaW5nRGlhbG9nLA0KICAgICAgICAgICAgICAgICAgKSwNCiAgICAgICAgICAgICAgICAgIFRleHRCdXR0b24oDQogICAgICAgICAgICAgICAgICAgIGNoaWxkOiBjb25zdCBUZXh0KCdMb2FkaW5nIFNuYWNrQmFyICcpLA0KICAgICAgICAgICAgICAgICAgICBvblByZXNzZWQ6IF9zaG93TG9hZGluZ1NuYWNrQmFyLA0KICAgICAgICAgICAgICAgICAgKSwNCiAgICAgICAgICAgICAgICBdLA0KICAgICAgICAgICAgICApLA0KICAgICAgICAgICAgICBSb3coDQogICAgICAgICAgICAgICAgbWFpbkF4aXNBbGlnbm1lbnQ6IE1haW5BeGlzQWxpZ25tZW50LnNwYWNlQXJvdW5kLA0KICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBbDQogICAgICAgICAgICAgICAgICBUZXh0QnV0dG9uKA0KICAgICAgICAgICAgICAgICAgICBjaGlsZDogY29uc3QgVGV4dCgnU2hvdyBxdWV1ZSBsb2FkaW5nIERpYWxvZycpLA0KICAgICAgICAgICAgICAgICAgICBvblByZXNzZWQ6IF9zaG93UXVldWVMb2FkaW5nRGlhbG9nLA0KICAgICAgICAgICAgICAgICAgKSwNCiAgICAgICAgICAgICAgICBdLA0KICAgICAgICAgICAgICApLA0KICAgICAgICAgICAgXSwNCiAgICAgICAgICApLA0KICAgICAgICApLA0KICAgICAgKSwNCiAgICAgIGZsb2F0aW5nQWN0aW9uQnV0dG9uOiBGbG9hdGluZ0FjdGlvbkJ1dHRvbigNCiAgICAgICAgb25QcmVzc2VkOiAoKSB7DQogICAgICAgICAgY29udHJvbGxlci5yZXNldCgpOw0KICAgICAgICAgIGNvbnRyb2xsZXIuZm9yd2FyZCgpOw0KICAgICAgICB9LA0KICAgICAgICBjaGlsZDogY29uc3QgVGV4dCgnUnVuJyksDQogICAgICApLA0KICAgICk7DQogIH0NCg0KICB2b2lkIF9zdGFydExvYWRpbmcoKSBhc3luYyB7DQogICAgc2V0U3RhdGUoKCkgew0KICAgICAgaXNMb2FkaW5nID0gdHJ1ZTsNCiAgICB9KTsNCiAgICBhd2FpdCBGdXR1cmUuZGVsYXllZChjb25zdCBEdXJhdGlvbihzZWNvbmRzOiA1KSk7DQogICAgc2V0U3RhdGUoKCkgew0KICAgICAgaXNMb2FkaW5nID0gZmFsc2U7DQogICAgfSk7DQogIH0NCg0KICB2b2lkIF9zdGFydE1hdGVyaWFsRGlhbG9nKCkgYXN5bmMgew0KICAgIGZpbmFsIGRpYWxvZyA9IG1hdGVyaWFsLkF0U3luY0RpYWxvZygNCiAgICAgIGNvbnRleHQ6IGNvbnRleHQsDQogICAgICBpbmRpY2F0b3JDb2xvcjogX2luZGljYXRvckNvbG9yLA0KICAgICk7DQogICAgZGlhbG9nLnNob3cobWVzc2FnZTogJ0Rvd25sb2FkaW5nIC4uLicpOw0KICAgIGZvciAoaW50IGkgPSAxOyBpIDwgMTAwOyBpICs9IDUpIHsNCiAgICAgIGRpYWxvZy51cGRhdGUodmFsdWU6IDAuMDEgKiBpLCBtZXNzYWdlOiAnRG93bmxvYWRpbmcgLi4uJyk7DQogICAgICBhd2FpdCBGdXR1cmUuZGVsYXllZChjb25zdCBEdXJhdGlvbihtaWxsaXNlY29uZHM6IDEwMCkpOw0KICAgIH0NCiAgICBkaWFsb2cuY2xvc2UoKTsNCiAgfQ0KDQogIHZvaWQgX3N0YXJ0Q3VwZXJ0aW5vRGlhbG9nKCkgYXN5bmMgew0KICAgIGZpbmFsIGRpYWxvZyA9IGN1cGVydGluby5BdFN5bmNEaWFsb2coDQogICAgICBjb250ZXh0OiBjb250ZXh0LA0KICAgICAgaW5kaWNhdG9yQ29sb3I6IF9pbmRpY2F0b3JDb2xvciwNCiAgICApOw0KICAgIGRpYWxvZy5zaG93KG1lc3NhZ2U6ICdEb3dubG9hZGluZyAuLi4nKTsNCiAgICBmb3IgKGludCBpID0gMTsgaSA8IDEwMDsgaSArPSA1KSB7DQogICAgICBkaWFsb2cudXBkYXRlKHZhbHVlOiAwLjAxICogaSwgbWVzc2FnZTogJ0Rvd25sb2FkaW5nIC4uLicpOw0KICAgICAgYXdhaXQgRnV0dXJlLmRlbGF5ZWQoY29uc3QgRHVyYXRpb24obWlsbGlzZWNvbmRzOiAxMDApKTsNCiAgICB9DQogICAgZGlhbG9nLmNsb3NlKCk7DQogIH0NCg0KICB2b2lkIF9zdGFydE1hdGVyaWFsU25hY2tCYXIoKSBhc3luYyB7DQogICAgZmluYWwgc25hY2tCYXIgPSBtYXRlcmlhbC5BdFN5bmNTbmFja0JhcigNCiAgICAgIGNvbnRleHQ6IGNvbnRleHQsDQogICAgICBpbmRpY2F0b3JDb2xvcjogX2luZGljYXRvckNvbG9yLA0KICAgICk7DQogICAgc25hY2tCYXIuc2hvdyhtZXNzYWdlOiAnRG93bmxvYWRpbmcgLi4uJyk7DQogICAgZm9yIChpbnQgaSA9IDE7IGkgPCAxMDA7IGkgKz0gNSkgew0KICAgICAgc25hY2tCYXIudXBkYXRlKHZhbHVlOiAwLjAxICogaSwgbWVzc2FnZTogJ0Rvd25sb2FkaW5nIC4uLicpOw0KICAgICAgYXdhaXQgRnV0dXJlLmRlbGF5ZWQoY29uc3QgRHVyYXRpb24obWlsbGlzZWNvbmRzOiAxMDApKTsNCiAgICB9DQogICAgc25hY2tCYXIuZGlzbWlzcygpOw0KICB9DQoNCiAgdm9pZCBfc3RhcnRDdXBlcnRpbm9TbmFja0JhcigpIGFzeW5jIHsNCiAgICBmaW5hbCBzbmFja0JhciA9IGN1cGVydGluby5BdFN5bmNTbmFja0JhcigNCiAgICAgIGNvbnRleHQ6IGNvbnRleHQsDQogICAgICBpbmRpY2F0b3JDb2xvcjogX2luZGljYXRvckNvbG9yLA0KICAgICk7DQogICAgc25hY2tCYXIuc2hvdygpOw0KICAgIGZvciAoaW50IGkgPSAxOyBpIDwgMTAwOyBpICs9IDUpIHsNCiAgICAgIHNuYWNrQmFyLnVwZGF0ZSh2YWx1ZTogMC4wMSAqIGksIG1lc3NhZ2U6ICdEb3dubG9hZGluZyAuLi4nKTsNCiAgICAgIGF3YWl0IEZ1dHVyZS5kZWxheWVkKGNvbnN0IER1cmF0aW9uKG1pbGxpc2Vjb25kczogMTAwKSk7DQogICAgfQ0KICAgIHNuYWNrQmFyLmRpc21pc3MoKTsNCiAgfQ0KDQogIHZvaWQgX3Nob3dDb2xvclBpY2tlcigpIHsNCiAgICBzaG93TW9kYWxCb3R0b21TaGVldCgNCiAgICAgIGNvbnRleHQ6IGNvbnRleHQsDQogICAgICBidWlsZGVyOiAoQnVpbGRDb250ZXh0IGNvbnRleHQpIHsNCiAgICAgICAgcmV0dXJuIEJsb2NrUGlja2VyKA0KICAgICAgICAgIHBpY2tlckNvbG9yOiBfaW5kaWNhdG9yQ29sb3IsDQogICAgICAgICAgb25Db2xvckNoYW5nZWQ6IChjb2xvcikgew0KICAgICAgICAgICAgc2V0U3RhdGUoKCkgew0KICAgICAgICAgICAgICBfaW5kaWNhdG9yQ29sb3IgPSBjb2xvcjsNCiAgICAgICAgICAgIH0pOw0KICAgICAgICAgICAgTmF2aWdhdG9yLnBvcChjb250ZXh0KTsNCiAgICAgICAgICB9LA0KICAgICAgICApOw0KICAgICAgfSwNCiAgICApOw0KICB9DQoNCiAgdm9pZCBfc2hvd0xvYWRpbmdEaWFsb2coKSBhc3luYyB7DQogICAgQXRTeW5jVUkuaW5zdGFuY2Uuc2hvd0RpYWxvZyhtZXNzYWdlOiAiRG93bmxvYWRpbmciKTsNCiAgICBhd2FpdCBGdXR1cmUuZGVsYXllZChjb25zdCBEdXJhdGlvbihzZWNvbmRzOiAzKSk7DQogICAgQXRTeW5jVUkuaW5zdGFuY2UuaGlkZURpYWxvZygpOw0KICB9DQoNCiAgdm9pZCBfc2hvd0xvYWRpbmdTbmFja0JhcigpIGFzeW5jIHsNCiAgICBBdFN5bmNVSS5pbnN0YW5jZS5zaG93U25hY2tCYXIobWVzc2FnZTogIkRvd25sb2FkaW5nIik7DQogICAgYXdhaXQgRnV0dXJlLmRlbGF5ZWQoY29uc3QgRHVyYXRpb24oc2Vjb25kczogMykpOw0KICAgIEF0U3luY1VJLmluc3RhbmNlLmhpZGVTbmFja0JhcigpOw0KICB9DQoNCiAgdm9pZCBfc2hvd1F1ZXVlTG9hZGluZ0RpYWxvZygpIGFzeW5jIHsNCiAgICBhd2FpdCBGdXR1cmUuZGVsYXllZChjb25zdCBEdXJhdGlvbihzZWNvbmRzOiAxKSk7DQoNCiAgICBmaW5hbCBjb250cm9sbGVyID0gQXRTeW5jVUkuaW5zdGFuY2Uuc3luY1VJQ29udHJvbGxlcjsNCg0KICAgIGxvZygnYWRkIGxvYWRpbmcgMScpOw0KICAgIGNvbnRyb2xsZXI/LmFkZExvYWRpbmdRdWV1ZSgpOw0KICAgIGF3YWl0IEZ1dHVyZS5kZWxheWVkKGNvbnN0IER1cmF0aW9uKHNlY29uZHM6IDEpKTsNCiAgICBsb2coJ2FkZCBsb2FkaW5nIDInKTsNCiAgICBjb250cm9sbGVyPy5hZGRMb2FkaW5nUXVldWUoKTsNCiAgICBhd2FpdCBGdXR1cmUuZGVsYXllZChjb25zdCBEdXJhdGlvbihzZWNvbmRzOiAxKSk7DQogICAgbG9nKCdyZW1vdmUgbG9hZGluZyAxJyk7DQogICAgY29udHJvbGxlcj8ucmVtb3ZlTG9hZGluZ1F1ZXVlKCk7DQogICAgYXdhaXQgRnV0dXJlLmRlbGF5ZWQoY29uc3QgRHVyYXRpb24oc2Vjb25kczogMSkpOw0KICAgIGxvZygncmVtb3ZlIGxvYWRpbmcgMScpOw0KICAgIGNvbnRyb2xsZXI/LnJlbW92ZUxvYWRpbmdRdWV1ZSgpOw0KICB9DQp9DQo=",
      "type": "text"
    }
  ],
  "hooks": [],
  "name": "at_sync_ui_flutter",
  "description": "A sample of how to use the at_sync_ui_flutter package.",
  "version": "0.1.0",
  "environment": {"mason": "any"},
  "vars": {}
});
