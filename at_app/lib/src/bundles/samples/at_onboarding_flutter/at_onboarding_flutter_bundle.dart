// GENERATED CODE - DO NOT MODIFY BY HAND
// ignore_for_file: prefer_single_quotes, public_member_api_docs, lines_longer_than_80_chars, implicit_dynamic_list_literal, implicit_dynamic_map_literal

import 'package:mason/mason.dart';

final atOnboardingFlutterBundle = MasonBundle.fromJson(<String, dynamic>{
  "files": [
    {
      "path": "lib\\contact_initial.dart",
      "data":
          "aW1wb3J0ICdwYWNrYWdlOmZsdXR0ZXIvbWF0ZXJpYWwuZGFydCc7CgpjbGFzcyBDb250YWN0SW5pdGlhbCBleHRlbmRzIFN0YXRlbGVzc1dpZGdldCB7CiAgZmluYWwgZG91YmxlIHNpemU7CiAgZmluYWwgU3RyaW5nIGluaXRpYWxzOwogIGZpbmFsIGludCBpbmRleDsKCiAgY29uc3QgQ29udGFjdEluaXRpYWwoe0tleSBrZXkgPSBjb25zdCBLZXkoJ2NvbnRhY3RfaW5pdGlhbCcpLCB0aGlzLnNpemUgPSA0MCwgdGhpcy5pbml0aWFscyA9ICdBVCcsIGluZGV4ID0gMn0pCiAgICAgIDogaW5kZXggPSAoaW5pdGlhbHMubGVuZ3RoIDwgMykgPyBpbml0aWFscy5sZW5ndGggOiAzLAogICAgICAgIHN1cGVyKGtleToga2V5KTsKICBAb3ZlcnJpZGUKICBXaWRnZXQgYnVpbGQoQnVpbGRDb250ZXh0IGNvbnRleHQpIHsKICAgIHJldHVybiBDb250YWluZXIoCiAgICAgIGhlaWdodDogc2l6ZSwKICAgICAgd2lkdGg6IHNpemUsCiAgICAgIGRlY29yYXRpb246IEJveERlY29yYXRpb24oCiAgICAgICAgY29sb3I6IENvbnRhY3RJbml0aWFsc0NvbG9ycy5nZXRDb2xvcihpbml0aWFscyksCiAgICAgICAgYm9yZGVyUmFkaXVzOiBCb3JkZXJSYWRpdXMuY2lyY3VsYXIoc2l6ZSksCiAgICAgICksCiAgICAgIGNoaWxkOiBDZW50ZXIoCiAgICAgICAgY2hpbGQ6IFRleHQoaW5pdGlhbHMuc3Vic3RyaW5nKChpbmRleCA9PSAxKSA/IDAgOiAxLCBpbmRleCkudG9VcHBlckNhc2UoKSwKICAgICAgICAgICAgc3R5bGU6IGNvbnN0IFRleHRTdHlsZSgKICAgICAgICAgICAgICBjb2xvcjogQ29sb3JzLndoaXRlLAogICAgICAgICAgICAgIGZvbnRTaXplOiAxMi4wLAogICAgICAgICAgICAgIGxldHRlclNwYWNpbmc6IDAuMSwKICAgICAgICAgICAgICBmb250V2VpZ2h0OiBGb250V2VpZ2h0Lnc3MDAsCiAgICAgICAgICAgICkpLAogICAgICApLAogICAgKTsKICB9Cn0KCmNsYXNzIENvbnRhY3RJbml0aWFsc0NvbG9ycyB7CiAgc3RhdGljIENvbG9yIGdldENvbG9yKFN0cmluZyBhdHNpZ24pIHsKICAgIGlmIChhdHNpZ24ubGVuZ3RoID09IDEpIHsKICAgICAgYXRzaWduID0gYXRzaWduICsgJyAnOwogICAgfQogICAgc3dpdGNoIChhdHNpZ25bMV0udG9VcHBlckNhc2UoKSkgewogICAgICBjYXNlICdBJzoKICAgICAgICByZXR1cm4gY29uc3QgQ29sb3IoMHhGRkFBMERGRSk7CiAgICAgIGNhc2UgJ0InOgogICAgICAgIHJldHVybiBjb25zdCBDb2xvcigweEZGMzI4M0ZFKTsKICAgICAgY2FzZSAnQyc6CiAgICAgICAgcmV0dXJuIGNvbnN0IENvbG9yKDB4RkY4NTY2MEQpOwogICAgICBjYXNlICdEJzoKICAgICAgICByZXR1cm4gY29uc3QgQ29sb3IoMHhGRjc4MkFCNik7CiAgICAgIGNhc2UgJ0UnOgogICAgICAgIHJldHVybiBjb25zdCBDb2xvcigweEZGNTY1NjU2KTsKICAgICAgY2FzZSAnRic6CiAgICAgICAgcmV0dXJuIGNvbnN0IENvbG9yKDB4RkYxQzgzNTYpOwogICAgICBjYXNlICdHJzoKICAgICAgICByZXR1cm4gY29uc3QgQ29sb3IoMHhGRjE2RkYzMik7CiAgICAgIGNhc2UgJ0gnOgogICAgICAgIHJldHVybiBjb25zdCBDb2xvcigweEZGRjdFMUEwKTsKICAgICAgY2FzZSAnSSc6CiAgICAgICAgcmV0dXJuIGNvbnN0IENvbG9yKDB4RkZFMkUyRTIpOwogICAgICBjYXNlICdKJzoKICAgICAgICByZXR1cm4gY29uc3QgQ29sb3IoMHhGRjFDQkU0Rik7CiAgICAgIGNhc2UgJ0snOgogICAgICAgIHJldHVybiBjb25zdCBDb2xvcigweEZGQzQ0NTFDKTsKICAgICAgY2FzZSAnTCc6CiAgICAgICAgcmV0dXJuIGNvbnN0IENvbG9yKDB4RkZERUEwRkQpOwogICAgICBjYXNlICdNJzoKICAgICAgICByZXR1cm4gY29uc3QgQ29sb3IoMHhGRkZFMDBGQSk7CiAgICAgIGNhc2UgJ04nOgogICAgICAgIHJldHVybiBjb25zdCBDb2xvcigweEZGMzI1QTlCKTsKICAgICAgY2FzZSAnTyc6CiAgICAgICAgcmV0dXJuIGNvbnN0IENvbG9yKDB4RkZGRUFGMTYpOwogICAgICBjYXNlICdQJzoKICAgICAgICByZXR1cm4gY29uc3QgQ29sb3IoMHhGRkY4QTE5Rik7CiAgICAgIGNhc2UgJ1EnOgogICAgICAgIHJldHVybiBjb25zdCBDb2xvcigweEZGOTBBRDFDKTsKICAgICAgY2FzZSAnUic6CiAgICAgICAgcmV0dXJuIGNvbnN0IENvbG9yKDB4RkZGNjIyMkUpOwogICAgICBjYXNlICdTJzoKICAgICAgICByZXR1cm4gY29uc3QgQ29sb3IoMHhGRjFDRkZDRSk7CiAgICAgIGNhc2UgJ1QnOgogICAgICAgIHJldHVybiBjb25zdCBDb2xvcigweEZGMkVEOUZGKTsKICAgICAgY2FzZSAnVSc6CiAgICAgICAgcmV0dXJuIGNvbnN0IENvbG9yKDB4RkZCMTBEQTEpOwogICAgICBjYXNlICdWJzoKICAgICAgICByZXR1cm4gY29uc3QgQ29sb3IoMHhGRkMwNzVBNik7CiAgICAgIGNhc2UgJ1cnOgogICAgICAgIHJldHVybiBjb25zdCBDb2xvcigweEZGRkMxQ0JGKTsKICAgICAgY2FzZSAnWCc6CiAgICAgICAgcmV0dXJuIGNvbnN0IENvbG9yKDB4RkZCMDAwNjgpOwogICAgICBjYXNlICdZJzoKICAgICAgICByZXR1cm4gY29uc3QgQ29sb3IoMHhGRkZCRTQyNik7CiAgICAgIGNhc2UgJ1onOgogICAgICAgIHJldHVybiBjb25zdCBDb2xvcigweEZGRkEwMDg3KTsKICAgICAgY2FzZSAnQCc6CiAgICAgICAgcmV0dXJuIGNvbnN0IENvbG9yKDB4RkZBQTBERkUpOwoKICAgICAgZGVmYXVsdDoKICAgICAgICByZXR1cm4gY29uc3QgQ29sb3IoMHhGRkFBMERGRSk7CiAgICB9CiAgfQp9Cg==",
      "type": "text"
    },
    {
      "path": "lib\\main.dart",
      "data":
          "aW1wb3J0ICdkYXJ0OmFzeW5jJzsNCg0KaW1wb3J0ICdwYWNrYWdlOmF0X2NsaWVudF9tb2JpbGUvYXRfY2xpZW50X21vYmlsZS5kYXJ0JzsNCmltcG9ydCAncGFja2FnZTphdF9vbmJvYXJkaW5nX2ZsdXR0ZXIvYXRfb25ib2FyZGluZ19mbHV0dGVyLmRhcnQnIHNob3cgT25ib2FyZGluZzsNCmltcG9ydCAncGFja2FnZTphdF9vbmJvYXJkaW5nX2ZsdXR0ZXIvd2lkZ2V0cy9jdXN0b21fcmVzZXRfYnV0dG9uLmRhcnQnOw0KaW1wb3J0ICdwYWNrYWdlOmF0X3V0aWxzL2F0X2xvZ2dlci5kYXJ0JyBzaG93IEF0U2lnbkxvZ2dlcjsNCmltcG9ydCAncGFja2FnZTpmbHV0dGVyL21hdGVyaWFsLmRhcnQnOw0KaW1wb3J0ICdwYWNrYWdlOnBhdGhfcHJvdmlkZXIvcGF0aF9wcm92aWRlci5kYXJ0JyBzaG93IGdldEFwcGxpY2F0aW9uU3VwcG9ydERpcmVjdG9yeTsNCg0KaW1wb3J0ICdwYWNrYWdlOmF0X2FwcF9mbHV0dGVyL2F0X2FwcF9mbHV0dGVyLmRhcnQnIHNob3cgQXRFbnY7DQoNCmltcG9ydCAnc3dpdGNoX2F0c2lnbi5kYXJ0JzsNCmltcG9ydCAndGhlbWUuZGFydCc7DQoNCkZ1dHVyZTx2b2lkPiBtYWluKCkgYXN5bmMgew0KICBhd2FpdCBBdEVudi5sb2FkKCk7DQogIHJ1bkFwcChjb25zdCBNeUFwcCgpKTsNCn0NCg0KRnV0dXJlPEF0Q2xpZW50UHJlZmVyZW5jZT4gbG9hZEF0Q2xpZW50UHJlZmVyZW5jZSgpIGFzeW5jIHsNCiAgdmFyIGRpciA9IGF3YWl0IGdldEFwcGxpY2F0aW9uU3VwcG9ydERpcmVjdG9yeSgpOw0KICByZXR1cm4gQXRDbGllbnRQcmVmZXJlbmNlKCkNCiAgICAgICAgLi5yb290RG9tYWluID0gQXRFbnYucm9vdERvbWFpbg0KICAgICAgICAuLm5hbWVzcGFjZSA9IEF0RW52LmFwcE5hbWVzcGFjZQ0KICAgICAgICAuLmhpdmVTdG9yYWdlUGF0aCA9IGRpci5wYXRoDQogICAgICAgIC4uY29tbWl0TG9nUGF0aCA9IGRpci5wYXRoDQogICAgICAgIC4uaXNMb2NhbFN0b3JlUmVxdWlyZWQgPSB0cnVlDQogICAgICAvLyBUT0RPIHNldCB0aGUgcmVzdCBvZiB5b3VyIEF0Q2xpZW50UHJlZmVyZW5jZSBoZXJlDQogICAgICA7DQp9DQoNCmZpbmFsIFN0cmVhbUNvbnRyb2xsZXI8VGhlbWVNb2RlPiB1cGRhdGVUaGVtZU1vZGUgPSBTdHJlYW1Db250cm9sbGVyPFRoZW1lTW9kZT4uYnJvYWRjYXN0KCk7DQoNCmNsYXNzIE15QXBwIGV4dGVuZHMgU3RhdGVmdWxXaWRnZXQgew0KICBjb25zdCBNeUFwcCh7S2V5PyBrZXl9KSA6IHN1cGVyKGtleToga2V5KTsNCiAgQG92ZXJyaWRlDQogIF9NeUFwcFN0YXRlIGNyZWF0ZVN0YXRlKCkgPT4gX015QXBwU3RhdGUoKTsNCn0NCg0KY2xhc3MgX015QXBwU3RhdGUgZXh0ZW5kcyBTdGF0ZTxNeUFwcD4gew0KICAvLyAqIGxvYWQgdGhlIEF0Q2xpZW50UHJlZmVyZW5jZSBpbiB0aGUgYmFja2dyb3VuZA0KICBGdXR1cmU8QXRDbGllbnRQcmVmZXJlbmNlPiBmdXR1cmVQcmVmZXJlbmNlID0gbG9hZEF0Q2xpZW50UHJlZmVyZW5jZSgpOw0KICBBdENsaWVudFByZWZlcmVuY2U/IGF0Q2xpZW50UHJlZmVyZW5jZTsNCg0KICBmaW5hbCBBdFNpZ25Mb2dnZXIgX2xvZ2dlciA9IEF0U2lnbkxvZ2dlcihBdEVudi5hcHBOYW1lc3BhY2UpOw0KDQogIEBvdmVycmlkZQ0KICBXaWRnZXQgYnVpbGQoQnVpbGRDb250ZXh0IGNvbnRleHQpIHsNCiAgICByZXR1cm4gU3RyZWFtQnVpbGRlcjxUaGVtZU1vZGU+KA0KICAgICAgc3RyZWFtOiB1cGRhdGVUaGVtZU1vZGUuc3RyZWFtLA0KICAgICAgaW5pdGlhbERhdGE6IFRoZW1lTW9kZS5saWdodCwNCiAgICAgIGJ1aWxkZXI6IChCdWlsZENvbnRleHQgY29udGV4dCwgQXN5bmNTbmFwc2hvdDxUaGVtZU1vZGU+IHNuYXBzaG90KSB7DQogICAgICAgIFRoZW1lTW9kZSB0aGVtZU1vZGUgPSBzbmFwc2hvdC5kYXRhID8/IFRoZW1lTW9kZS5saWdodDsNCiAgICAgICAgcmV0dXJuIE1hdGVyaWFsQXBwKA0KICAgICAgICAgIC8vICogVGhlIG9uYm9hcmRpbmcgc2NyZWVuIChmaXJzdCBzY3JlZW4pDQogICAgICAgICAgdGhlbWU6IGxpZ2h0VGhlbWUuY29weVdpdGgoY29sb3JTY2hlbWU6IGxpZ2h0VGhlbWUuY29sb3JTY2hlbWUuY29weVdpdGgoc2Vjb25kYXJ5OiBDb2xvcnMuYmxhY2spKSwNCiAgICAgICAgICBkYXJrVGhlbWU6IGRhcmtUaGVtZS5jb3B5V2l0aCgNCiAgICAgICAgICAgIGNvbG9yU2NoZW1lOiBkYXJrVGhlbWUuY29sb3JTY2hlbWUuY29weVdpdGgoc2Vjb25kYXJ5OiBDb2xvcnMud2hpdGUpLA0KICAgICAgICAgICksDQogICAgICAgICAgdGhlbWVNb2RlOiB0aGVtZU1vZGUsDQogICAgICAgICAgaG9tZTogU2NhZmZvbGQoDQogICAgICAgICAgICBhcHBCYXI6IEFwcEJhcigNCiAgICAgICAgICAgICAgdGl0bGU6IGNvbnN0IFRleHQoJ015QXBwJyksDQogICAgICAgICAgICAgIGFjdGlvbnM6IDxXaWRnZXQ+Ww0KICAgICAgICAgICAgICAgIEljb25CdXR0b24oDQogICAgICAgICAgICAgICAgICBvblByZXNzZWQ6ICgpIHsNCiAgICAgICAgICAgICAgICAgICAgdXBkYXRlVGhlbWVNb2RlLnNpbmsuYWRkKHRoZW1lTW9kZSA9PSBUaGVtZU1vZGUubGlnaHQgPyBUaGVtZU1vZGUuZGFyayA6IFRoZW1lTW9kZS5saWdodCk7DQogICAgICAgICAgICAgICAgICB9LA0KICAgICAgICAgICAgICAgICAgaWNvbjogSWNvbigNCiAgICAgICAgICAgICAgICAgICAgVGhlbWUub2YoY29udGV4dCkuYnJpZ2h0bmVzcyA9PSBCcmlnaHRuZXNzLmxpZ2h0DQogICAgICAgICAgICAgICAgICAgICAgICA/IEljb25zLmRhcmtfbW9kZV9vdXRsaW5lZA0KICAgICAgICAgICAgICAgICAgICAgICAgOiBJY29ucy5saWdodF9tb2RlX291dGxpbmVkLA0KICAgICAgICAgICAgICAgICAgKSwNCiAgICAgICAgICAgICAgICApDQogICAgICAgICAgICAgIF0sDQogICAgICAgICAgICApLA0KICAgICAgICAgICAgYm9keTogQnVpbGRlcigNCiAgICAgICAgICAgICAgYnVpbGRlcjogKGNvbnRleHQpID0+IENlbnRlcigNCiAgICAgICAgICAgICAgICBjaGlsZDogQ29sdW1uKA0KICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IFsNCiAgICAgICAgICAgICAgICAgICAgRWxldmF0ZWRCdXR0b24oDQogICAgICAgICAgICAgICAgICAgICAgb25QcmVzc2VkOiAoKSBhc3luYyB7DQogICAgICAgICAgICAgICAgICAgICAgICB2YXIgcHJlZmVyZW5jZSA9IGF3YWl0IGZ1dHVyZVByZWZlcmVuY2U7DQogICAgICAgICAgICAgICAgICAgICAgICBzZXRTdGF0ZSgoKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgIGF0Q2xpZW50UHJlZmVyZW5jZSA9IHByZWZlcmVuY2U7DQogICAgICAgICAgICAgICAgICAgICAgICB9KTsNCiAgICAgICAgICAgICAgICAgICAgICAgIE9uYm9hcmRpbmcoDQogICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQ6IGNvbnRleHQsDQogICAgICAgICAgICAgICAgICAgICAgICAgIGF0Q2xpZW50UHJlZmVyZW5jZTogYXRDbGllbnRQcmVmZXJlbmNlISwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgZG9tYWluOiBBdEVudi5yb290RG9tYWluLA0KICAgICAgICAgICAgICAgICAgICAgICAgICByb290RW52aXJvbm1lbnQ6IEF0RW52LnJvb3RFbnZpcm9ubWVudCwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgYXBwQVBJS2V5OiBBdEVudi5hcHBBcGlLZXksDQogICAgICAgICAgICAgICAgICAgICAgICAgIG9uYm9hcmQ6ICh2YWx1ZSwgYXRzaWduKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgX2xvZ2dlci5maW5lcignU3VjY2Vzc2Z1bGx5IG9uYm9hcmRlZCAkYXRzaWduJyk7DQogICAgICAgICAgICAgICAgICAgICAgICAgIH0sDQogICAgICAgICAgICAgICAgICAgICAgICAgIG9uRXJyb3I6IChlcnJvcikgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9sb2dnZXIuc2V2ZXJlKCdPbmJvYXJkaW5nIHRocm93cyAkZXJyb3IgZXJyb3InKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgfSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgbmV4dFNjcmVlbjogY29uc3QgSG9tZVNjcmVlbigpLA0KICAgICAgICAgICAgICAgICAgICAgICAgKTsNCiAgICAgICAgICAgICAgICAgICAgICB9LA0KICAgICAgICAgICAgICAgICAgICAgIGNoaWxkOiBjb25zdCBUZXh0KCdPbmJvYXJkIGFuIEBzaWduJyksDQogICAgICAgICAgICAgICAgICAgICksDQogICAgICAgICAgICAgICAgICAgIEN1c3RvbVJlc2V0QnV0dG9uKA0KICAgICAgICAgICAgICAgICAgICAgIGxvYWRpbmc6IGZhbHNlLA0KICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvblRleHQ6ICdSZXNldCcsDQogICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDkwLA0KICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogNDAsDQogICAgICAgICAgICAgICAgICAgICksDQogICAgICAgICAgICAgICAgICBdLA0KICAgICAgICAgICAgICAgICksDQogICAgICAgICAgICAgICksDQogICAgICAgICAgICApLA0KICAgICAgICAgICksDQogICAgICAgICk7DQogICAgICB9LA0KICAgICk7DQogIH0NCn0NCg0KLy8qIFRoZSBuZXh0IHNjcmVlbiBhZnRlciBvbmJvYXJkaW5nIChzZWNvbmQgc2NyZWVuKQ0KY2xhc3MgSG9tZVNjcmVlbiBleHRlbmRzIFN0YXRlbGVzc1dpZGdldCB7DQogIGNvbnN0IEhvbWVTY3JlZW4oe0tleT8ga2V5fSkgOiBzdXBlcihrZXk6IGtleSk7DQoNCiAgQG92ZXJyaWRlDQogIFdpZGdldCBidWlsZChCdWlsZENvbnRleHQgY29udGV4dCkgew0KICAgIC8vLyBHZXQgdGhlIEF0Q2xpZW50TWFuYWdlciBpbnN0YW5jZQ0KICAgIHZhciBhdENsaWVudE1hbmFnZXIgPSBBdENsaWVudE1hbmFnZXIuZ2V0SW5zdGFuY2UoKTsNCg0KICAgIHJldHVybiBTY2FmZm9sZCgNCiAgICAgIGFwcEJhcjogQXBwQmFyKA0KICAgICAgICB0aXRsZTogY29uc3QgVGV4dCgnRGFzaGJvYXJkJyksDQogICAgICAgIGFjdGlvbnM6IDxXaWRnZXQ+Ww0KICAgICAgICAgIEljb25CdXR0b24oDQogICAgICAgICAgICBpY29uOiBjb25zdCBJY29uKEljb25zLnN3aXRjaF9hY2NvdW50KSwNCiAgICAgICAgICAgIHRvb2x0aXA6ICdTd2l0Y2ggQHNpZ24nLA0KICAgICAgICAgICAgb25QcmVzc2VkOiAoKSBhc3luYyB7DQogICAgICAgICAgICAgIHZhciBhdFNpZ25MaXN0ID0gYXdhaXQgS2V5Y2hhaW5VdGlsLmdldEF0c2lnbkxpc3QoKTsNCiAgICAgICAgICAgICAgYXdhaXQgc2hvd01vZGFsQm90dG9tU2hlZXQoDQogICAgICAgICAgICAgICAgY29udGV4dDogY29udGV4dCwNCiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IENvbG9ycy50cmFuc3BhcmVudCwNCiAgICAgICAgICAgICAgICBidWlsZGVyOiAoY29udGV4dCkgPT4gQXRTaWduQm90dG9tU2hlZXQoYXRTaWduTGlzdDogYXRTaWduTGlzdCA/PyBbXSksDQogICAgICAgICAgICAgICk7DQogICAgICAgICAgICB9LA0KICAgICAgICAgICksDQogICAgICAgIF0sDQogICAgICApLA0KICAgICAgYm9keTogQ2VudGVyKA0KICAgICAgICBjaGlsZDogQ29sdW1uKA0KICAgICAgICAgIGNoaWxkcmVuOiBbDQogICAgICAgICAgICBjb25zdCBUZXh0KCdTdWNjZXNzZnVsbHkgb25ib2FyZGVkIGFuZCBuYXZpZ2F0ZWQgdG8gRmlyc3RBcHBTY3JlZW4nKSwNCg0KICAgICAgICAgICAgLy8vIFVzZSB0aGUgQXRDbGllbnRNYW5hZ2VyIGluc3RhbmNlIHRvIGdldCB0aGUgY3VycmVudCBhdHNpZ24NCiAgICAgICAgICAgIFRleHQoJ0N1cnJlbnQgQHNpZ246ICR7YXRDbGllbnRNYW5hZ2VyLmF0Q2xpZW50LmdldEN1cnJlbnRBdFNpZ24oKX0nKSwNCiAgICAgICAgICBdLA0KICAgICAgICApLA0KICAgICAgKSwNCiAgICApOw0KICB9DQp9DQo=",
      "type": "text"
    },
    {
      "path": "lib\\switch_atsign.dart",
      "data":
          "",
      "type": "text"
    },
    {
      "path": "lib\\theme.dart",
      "data":
          "aW1wb3J0ICdwYWNrYWdlOmZsdXR0ZXIvbWF0ZXJpYWwuZGFydCc7DQoNClRoZW1lRGF0YSBsaWdodFRoZW1lID0gVGhlbWVEYXRhKA0KICBicmlnaHRuZXNzOiBCcmlnaHRuZXNzLmxpZ2h0LA0KICBwcmltYXJ5Q29sb3I6IGNvbnN0IENvbG9yKDB4RkZmNDUzM2QpLA0KICBiYWNrZ3JvdW5kQ29sb3I6IENvbG9ycy53aGl0ZSwNCiAgc2NhZmZvbGRCYWNrZ3JvdW5kQ29sb3I6IENvbG9ycy53aGl0ZSwNCik7DQoNClRoZW1lRGF0YSBkYXJrVGhlbWUgPSBUaGVtZURhdGEoDQogIGJyaWdodG5lc3M6IEJyaWdodG5lc3MuZGFyaywNCiAgcHJpbWFyeUNvbG9yOiBDb2xvcnMuYmx1ZSwNCiAgYmFja2dyb3VuZENvbG9yOiBDb2xvcnMuZ3JleVs4NTBdLA0KICBzY2FmZm9sZEJhY2tncm91bmRDb2xvcjogQ29sb3JzLmdyZXlbODUwXSwNCik7DQo=",
      "type": "text"
    }
  ],
  "hooks": [],
  "name": "at_onboarding_flutter",
  "description": "A sample of how to use the at_onboarding_flutter package.",
  "version": "0.1.0",
  "vars": {}
});
