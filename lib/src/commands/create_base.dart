import 'dart:io' show Directory, File;

import 'package:args/command_runner.dart' show Command, UsageException;
import 'package:logger/logger.dart' show Logger;
import 'package:path/path.dart' show basename, normalize;

import '../cli/flutter_cli.dart';
import '../constants/create_args.dart';
import '../constants/dart_keywords.dart';
import '../models/command_status.dart';
import '../util/logger.dart';

/// This class is an abstraction of the flutter create command
/// It deletes the default main.dart file,
/// but will keep the existing one if it exists.
abstract class CreateBase extends Command<CommandStatus> {
  @override
  final String name = 'create';

  final Logger _logger = LoggerService().logger;

  CreateBase({Logger? logger}) {
    // Flutter Arguments
    // Copyright 2014 The Flutter Authors. All rights reserved.
    argParser.addFlag(
      'pub',
      defaultsTo: true,
      help:
          'Whether to run "flutter pub get" after the project has been created.',
    );
    argParser.addFlag(
      'offline',
      defaultsTo: false,
      help:
          'When "flutter pub get" is run by the create command, this indicates '
          'whether to run it in offline mode or not. In offline mode, it will need to '
          'have all dependencies already available in the pub cache to succeed.',
    );
    argParser.addFlag(
      'overwrite',
      defaultsTo: false,
      help: 'When performing operations, overwrite existing files.',
    );
    argParser.addOption(
      'description',
      defaultsTo: 'A new Flutter project.',
      help:
          'The description to use for your new Flutter project. This string ends up in the pubspec.yaml file.',
    );
    argParser.addOption(
      'org',
      defaultsTo: 'com.example',
      help:
          'The organization responsible for your new Flutter project, in reverse domain name notation. '
          'This string is used in Java package names and as prefix in the iOS bundle identifier.',
    );
    argParser.addOption(
      'project-name',
      defaultsTo: null,
      help:
          'The project name for this new Flutter project. This must be a valid dart package name.',
    );
    argParser.addOption('ios-language',
        abbr: 'i',
        defaultsTo: 'swift',
        allowed: <String>['objc', 'swift'],
        help:
            'The language to use for iOS-specific code, either ObjectiveC (legacy) or Swift (recommended).');
    argParser.addOption(
      'android-language',
      abbr: 'a',
      defaultsTo: 'kotlin',
      allowed: <String>['java', 'kotlin'],
      help:
          'The language to use for Android-specific code, either Java (legacy) or Kotlin (recommended).',
    );
    argParser.addMultiOption(
      'platforms',
      defaultsTo: kAvailablePlatforms,
      allowed: kAllCreatePlatforms,
      help: kPlatformHelp,
    );
  }

  bool? boolArg(String name) => argResults?[name] as bool?;
  String? stringArg(String name) => argResults?[name] as String?;
  List<String>? lStringArg(String name) => argResults?[name] as List<String>?;

  @override
  Future<CommandStatus> run() async {
    if (!await FlutterCli.isInstalled()) {
      _logger.e("Flutter is not available");
      return CommandStatus.fail;
    }

    validateOutputDirectoryArg();
    bool? pub = boolArg('pub');
    bool? offline = boolArg('offline');
    bool? overwrite = boolArg('overwrite');
    String? description = stringArg('description');
    String? org = stringArg('org');
    String? projectName = stringArg('project-name');
    String? iosLang = stringArg('ios-language');
    String? androidLang = stringArg('android-language');
    List<String>? platforms = lStringArg('platforms');

    File mainFile = File('${projectDir.absolute.path}/lib/main.dart');
    final bool exists = mainFile.existsSync();

    var packageName =
        projectName ?? basename(normalize(projectDir.absolute.path));

    if (!validatePackageName(packageName)) {
      throw FormatException(
          '"$packageName" is not a valid Dart package name.\n\n'
          'See https://dart.dev/tools/pub/pubspec#name for more information.');
    }

    try {
      await FlutterCli.create(
        projectDir,
        pub: pub,
        offline: offline,
        overwrite: overwrite,
        description: description,
        org: org,
        projectName: projectName,
        iosLanguage: iosLang,
        androidLanguage: androidLang,
        platforms: platforms,
      );
    } catch (e) {
      _logger.e('Unable to run flutter create.');
      _logger.i(e.toString());
      return CommandStatus.fail;
    }

    // Delete the main file if it was generated by flutter create.
    if (!exists) {
      await mainFile.delete();

      if (mainFile.existsSync()) {
        _logger.e("Unable to reset the template");
        return CommandStatus.fail;
      }
    }

    return CommandStatus.success;
  }

  void validateOutputDirectoryArg() {
    if (argResults?.rest.isEmpty ?? false) {
      throw UsageException(
          'No option specified for the output directory.', usage);
    }

    if (argResults!.rest.length > 1) {
      String message = 'Multiple output directories specified.';
      for (final String arg in argResults!.rest) {
        if (arg.startsWith('-')) {
          message += '\nTry moving $arg to be immediately following $name';
          break;
        }
      }
      throw FormatException(message);
    }
  }

  // Copyright 2014 The Flutter Authors. All rights reserved.
  bool validatePackageName(String name) {
    final Match? match = RegExp('[a-z_][a-z0-9_]*').matchAsPrefix(name);
    return match != null &&
        match.end == name.length &&
        !dartKeywords.contains(name);
  }

  Directory get projectDir {
    return Directory(argResults!.rest.first);
  }
}
